Liferay.Loader.define("frontend-js-web@4.0.38/liferay/aop/AOP.es", ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AOP = exports.default = void 0;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
    }

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */
    var ALTER_RETURN = 'alterReturn';
    var HALT = 'halt';
    var METAL_AOP = '__METAL_AOP__';
    var PREVENT = 'prevent';
    /**
     * AOP class
     */

    var AOP = /*#__PURE__*/function () {
      /**
       * Constructor for AOP class.
       * @param {!Object} obj The object containing the displaced function.
       * @param {!string} fnName The name of the displaced function.
       */
      function AOP(obj, fnName) {
        _classCallCheck(this, AOP);

        /**
         * Array of listeners that will invoke after the displaced function.
         * @type {!Array}
         * @protected
         */
        this.after_ = [];
        /**
         * Array of listeners that will invoke before the displaced function.
         * @type {!Array}
         * @protected
         */

        this.before_ = [];
        /**
         * The name of the displaced function.
         * @type {string}
         * @protected
         */

        this.fnName_ = fnName;
        /**
         * The displaced function.
         * @type {Function}
         * @protected
         */

        this.fn_ = obj[fnName];
        /**
         * The object hosting the method to displace.
         * @type {Object}
         * @protected
         */

        this.obj_ = obj;
      }
      /**
       * Creates handle for detaching listener from displaced function.
       * @param {!Function} fn The listener
       * @param {!boolean} before Determines when listener fires
       * @return {Object}
       */

      _createClass(AOP, [{
        key: "createHandle",
        value: function createHandle(fn, before) {
          return {
            detach: this.detach_.bind(this, fn, before)
          };
        }
        /**
         * Detaches listener from displaced function.
         * @param {!Function} fn The listener
         * @param {!boolean} before Determines when listener fires
         */

      }, {
        key: "detach_",
        value: function detach_(fn, before) {
          var listenerArray = before ? this.before_ : this.after_;
          listenerArray.splice(listenerArray.indexOf(fn), 1);
        }
        /**
         *
         * @param {any} args* Arguments are passed to the wrapping and wrapped functions.
         * @return {any} Return value of wrapped function.
         */

      }, {
        key: "exec",
        value: function exec() {
          var listenerRetVal;
          var prevented = false;
          var retVal;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          for (var i = 0; i < this.before_.length; i++) {
            listenerRetVal = this.before_[i].apply(this.obj_, args);

            if (listenerRetVal && listenerRetVal.type) {
              if (listenerRetVal.type === HALT) {
                return listenerRetVal.value;
              } else if (listenerRetVal.type === PREVENT) {
                prevented = true;
              }
            }
          }

          if (!prevented) {
            retVal = this.fn_.apply(this.obj_, args);
          }

          AOP.currentRetVal = retVal;
          AOP.originalRetVal = retVal;

          for (var _i = 0; _i < this.after_.length; _i++) {
            listenerRetVal = this.after_[_i].apply(this.obj_, args);

            if (listenerRetVal && listenerRetVal.type) {
              if (listenerRetVal.type === HALT) {
                return listenerRetVal.value;
              } else if (listenerRetVal.type === ALTER_RETURN) {
                retVal = listenerRetVal.value;
                AOP.currentRetVal = retVal;
              }
            }
          }

          return retVal;
        }
        /**
         * Registers an AOP listener.
         *
         * @param {!Function} fn the function to execute.
         * @param {boolean} before determines when the listener is invoked.
         * @return {EventHandle} Can be used to remove the listener.
         */

      }, {
        key: "register",
        value: function register(fn, before) {
          if (before) {
            this.before_.push(fn);
          } else {
            this.after_.push(fn);
          }

          return this.createHandle(fn, before);
        }
        /**
         * Executes the supplied method after the specified function.
         *
         * @param {!Function} fn the function to execute.
         * @param {!Object} obj the object hosting the method to displace.
         * @param {!string} fnName the name of the method to displace.
         * @return {EventHandle} Can be used to remove the listener.
         */

      }], [{
        key: "after",
        value: function after(fn, obj, fnName) {
          return AOP.inject(false, fn, obj, fnName);
        }
        /**
         * Return an alterReturn object when you want to change the result returned
         * from the core method to the caller.
         *
         * @param {any} value Return value passed to code that invoked the wrapped
         * function.
         * @return {Object}
         */

      }, {
        key: "alterReturn",
        value: function alterReturn(value) {
          return AOP.modify_(ALTER_RETURN, value);
        }
        /**
         * Executes the supplied method before the specified function.
         *
         * @param {!Function} fn the function to execute.
         * @param {!Object} obj the object hosting the method to displace.
         * @param {!string} fnName the name of the method to displace.
         * @return {EventHandle} Can be used to remove the listener.
         */

      }, {
        key: "before",
        value: function before(fn, obj, fnName) {
          return AOP.inject(true, fn, obj, fnName);
        }
        /**
         * Return a halt object when you want to terminate the execution
         * of all subsequent subscribers as well as the wrapped method
         * if it has not executed yet.
         *
         * @param {any} value Return value passed to code that invoked the wrapped
         * function.
         * @return {Object}
         */

      }, {
        key: "halt",
        value: function halt(value) {
          return AOP.modify_(HALT, value);
        }
        /**
         * Executes the supplied method before or after the specified function.
         *
         * @param {boolean} before determines when the listener is invoked.
         * @param {!Function} fn the function to execute.
         * @param {!Object} obj the object hosting the method to displace.
         * @param {!string} fnName the name of the method to displace.
         * @return {EventHandle} Can be used to remove the listener.
         */

      }, {
        key: "inject",
        value: function inject(before, fn, obj, fnName) {
          var aopObj = obj[METAL_AOP];

          if (!aopObj) {
            aopObj = obj[METAL_AOP] = {};
          }

          if (!aopObj[fnName]) {
            aopObj[fnName] = new AOP(obj, fnName);

            obj[fnName] = function () {
              var _aopObj$fnName;

              return (_aopObj$fnName = aopObj[fnName]).exec.apply(_aopObj$fnName, arguments);
            };
          }

          return aopObj[fnName].register(fn, before);
        }
        /**
         * Returns object which instructs `exec` method to modify the return
         * value or prevent default behavior of wrapped function.
         *
         * @param {!string} type The type of modification to be made
         * @param {any} value Return value passed to code that invoked the wrapped
         * function.
         * @return {Object}
         */

      }, {
        key: "modify_",
        value: function modify_(type, value) {
          return {
            type: type,
            value: value
          };
        }
        /**
         * Return a prevent object when you want to prevent the wrapped function
         * from executing, but want the remaining listeners to execute.
         * @return {Object}
         */

      }, {
        key: "prevent",
        value: function prevent() {
          return AOP.modify_(PREVENT);
        }
      }]);

      return AOP;
    }();

    exports.AOP = AOP;
    var _default = AOP;
    exports.default = _default;
    //# sourceMappingURL=AOP.es.js.map
  }
});
//# sourceMappingURL=AOP.es.js.map
Liferay.Loader.define("frontend-js-web@4.0.38/liferay/autosize/autosize.es", ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }return obj;
    }

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */
    var DEFAULT_APPEND_CONTENT = '&nbsp;&nbsp;';

    var AutoSize = /*#__PURE__*/function () {
      function AutoSize(inputElement) {
        var _this = this;

        _classCallCheck(this, AutoSize);

        _defineProperty(this, "handleInput", function (event) {
          requestAnimationFrame(function () {
            _this._resizeInput(event.target);
          });
        });

        this.inputElement = inputElement;
        this.computedStyle = getComputedStyle(this.inputElement);
        this.minHeight = parseInt(this.computedStyle.height.replace('px', ''), 10);
        this.template = this.createTemplate(this.computedStyle);
        document.body.appendChild(this.template);
        this.inputElement.addEventListener('input', this.handleInput);

        this._resizeInput(this.inputElement);
      }

      _createClass(AutoSize, [{
        key: "createTemplate",
        value: function createTemplate(computedStyle) {
          var template = document.createElement('pre');
          template.style.clip = 'rect(0, 0, 0, 0) !important';
          template.style.left = '0';
          template.style.overflowWrap = 'break-word';
          template.style.position = 'absolute';
          template.style.top = '0';
          template.style.transform = 'scale(0)';
          template.style.whiteSpace = 'pre-wrap';
          template.style.wordBreak = 'break-word';
          template.style.fontFamily = computedStyle.fontFamily;
          template.style.fontSize = computedStyle.fontSize;
          template.style.fontStyle = computedStyle.fontStyle;
          template.style.fontWeight = computedStyle.fontWeight;
          template.style.lineHeight = computedStyle.lineHeight;
          template.style.letterSpacing = computedStyle.letterSpacing;
          template.style.textTransform = computedStyle.textTransform;
          template.style.width = computedStyle.width;
          template.textContent = DEFAULT_APPEND_CONTENT;
          return template;
        }
      }, {
        key: "_resizeInput",
        value: function _resizeInput(inputElement) {
          if (this.template.style.width !== this.computedStyle.width) {
            this.template.style.width = this.computedStyle.width;
          }

          this.template.innerHTML = inputElement.value + DEFAULT_APPEND_CONTENT;
          inputElement.style.height = "".concat(this.template.scrollHeight < this.minHeight ? this.minHeight : this.template.scrollHeight, "px");
        }
      }]);

      return AutoSize;
    }();

    var _default = AutoSize;
    exports.default = _default;
    //# sourceMappingURL=autosize.es.js.map
  }
});
//# sourceMappingURL=autosize.es.js.map
Liferay.Loader.define("frontend-js-web@4.0.38/liferay/debounce/debounce.es", ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.cancelDebounce = cancelDebounce;
    exports.debounce = debounce;
    exports.default = void 0;

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }

    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }return arr2;
      }
    }

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */

    /**
     * Debounces function execution.
     * @param {!function()} fn
     * @param {number} delay
     * @return {!function()}
     */
    function debounce(fn, delay) {
      return function debounced() {
        var args = arguments;
        cancelDebounce(debounced);
        debounced.id = setTimeout(function () {
          fn.apply(void 0, _toConsumableArray(args));
        }, delay);
      };
    }
    /**
     * Cancels the scheduled debounced function.
     * @param {function()} debounced
     */

    function cancelDebounce(debounced) {
      clearTimeout(debounced.id);
    }

    var _default = debounce;
    exports.default = _default;
    //# sourceMappingURL=debounce.es.js.map
  }
});
//# sourceMappingURL=debounce.es.js.map
'use strict';

/**
 * A collection of core utility functions.
 * @const
 */

Liferay.Loader.define("frontend-js-metal-web$metal@2.16.8/lib/coreNamed", ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    exports.abstractMethod = abstractMethod;
    exports.disableCompatibilityMode = disableCompatibilityMode;
    exports.enableCompatibilityMode = enableCompatibilityMode;
    exports.getCompatibilityModeData = getCompatibilityModeData;
    exports.getFunctionName = getFunctionName;
    exports.getStaticProperty = getStaticProperty;
    exports.getUid = getUid;
    exports.identityFunction = identityFunction;
    exports.isBoolean = isBoolean;
    exports.isDef = isDef;
    exports.isDefAndNotNull = isDefAndNotNull;
    exports.isDocument = isDocument;
    exports.isDocumentFragment = isDocumentFragment;
    exports.isElement = isElement;
    exports.isFunction = isFunction;
    exports.isNull = isNull;
    exports.isNumber = isNumber;
    exports.isWindow = isWindow;
    exports.isObject = isObject;
    exports.isPromise = isPromise;
    exports.isString = isString;
    exports.isServerSide = isServerSide;
    exports.nullFunction = nullFunction;
    var compatibilityModeData_ = void 0;

    /**
     * Counter for unique id.
     * @type {Number}
     * @private
     */
    var uniqueIdCounter_ = 1;

    /**
     * Unique id property prefix.
     * @type {String}
     * @protected
     */
    var UID_PROPERTY = exports.UID_PROPERTY = 'core_' + (Math.random() * 1e9 >>> 0);

    /**
     * When defining a class Foo with an abstract method bar(), you can do:
     * Foo.prototype.bar = abstractMethod
     *
     * Now if a subclass of Foo fails to override bar(), an error will be thrown
     * when bar() is invoked.
     *
     * @type {!Function}
     * @throws {Error} when invoked to indicate the method should be overridden.
     */
    function abstractMethod() {
      throw Error('Unimplemented abstract method');
    }

    /**
     * Disables Metal.js's compatibility mode.
     */
    function disableCompatibilityMode() {
      compatibilityModeData_ = undefined;
    }

    /**
     * Enables Metal.js's compatibility mode with the following features from rc
     * and 1.x versions:
     *     - Using "key" to reference component instances. In the current version
     *       this should be done via "ref" instead. This allows old code still
     *       using "key" to keep working like before. NOTE: this may cause
     *       problems, since "key" is meant to be used differently. Only use this
     *       if it's not possible to upgrade the code to use "ref" instead.
     * @param {Object=} data Optional object with data to specify more
     *     details, such as:
     *         - renderers {Array} the template renderers that should be in
     *           compatibility mode, either their constructors or strings
     *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones
     *           that extend from IncrementalDomRenderer.
     * @type {Object}
     */
    function enableCompatibilityMode() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      compatibilityModeData_ = data;
    }

    /**
     * Returns the data used for compatibility mode, or nothing if it hasn't been
     * enabled.
     * @return {Object}
     */
    function getCompatibilityModeData() {
      // Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.
      if (compatibilityModeData_ === undefined) {
        if (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {
          enableCompatibilityMode(window.__METAL_COMPATIBILITY__);
        }
      }
      return compatibilityModeData_;
    }

    /**
     * Returns the first argument if it's truthy, or the second otherwise.
     * @param {*} a
     * @param {*} b
     * @return {*}
     * @protected
     */
    function getFirstTruthy_(a, b) {
      return a || b;
    }

    /**
     * Gets the name of the given function. If the current browser doesn't
     * support the `name` property, like IE11, this will calculate it from the function's
     * content string.
     * @param {!function()} fn
     * @return {string}
     */
    function getFunctionName(fn) {
      if (!fn.name) {
        var str = fn.toString();
        fn.name = str.substring(9, str.indexOf('('));
      }
      return fn.name;
    }

    /**
     * Gets the value of a static property in the given class. The value will be
     * inherited from ancestors as expected, unless a custom merge function is given,
     * which can change how the super classes' value for that property will be merged
     * together.
     * The final merged value will be stored in another property, so that it won't
     * be recalculated even if this function is called multiple times.
     * @param {!function()} ctor Class constructor.
     * @param {string} propertyName Property name to be merged.
     * @param {function(*, *):*=} mergeFn Function that receives the merged
     *     value of the property so far and the next value to be merged to it.
     *     Should return these two merged together. If not passed the final property
     *     will be the first truthy value among ancestors.
     * @return {Object}
     */
    function getStaticProperty(ctor, propertyName) {
      var mergeFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getFirstTruthy_;

      var mergedName = propertyName + '_MERGED';
      if (!ctor.hasOwnProperty(mergedName)) {
        // eslint-disable-next-line
        var merged = ctor.hasOwnProperty(propertyName) ? ctor[propertyName] : null;
        if (ctor.__proto__ && !ctor.__proto__.isPrototypeOf(Function)) {
          merged = mergeFn(merged, getStaticProperty(ctor.__proto__, propertyName, mergeFn));
        }
        ctor[mergedName] = merged;
      }
      return ctor[mergedName];
    }

    /**
     * Gets an unique id. If `object` argument is passed, the object is
     * mutated with an unique id. Consecutive calls with the same object
     * reference won't mutate the object again, instead the current object uid
     * returns. See {@link UID_PROPERTY}.
     * @param {Object=} object Optional object to be mutated with the uid. If
     *     not specified this method only returns the uid.
     * @param {boolean=} noInheritance Optional flag indicating if this
     *     object's uid property can be inherited from parents or not.
     * @throws {Error} when invoked to indicate the method should be overridden.
     * @return {number}
     */
    function getUid(object, noInheritance) {
      if (object) {
        var id = object[UID_PROPERTY];
        if (noInheritance && !object.hasOwnProperty(UID_PROPERTY)) {
          id = null;
        }
        return id || (object[UID_PROPERTY] = uniqueIdCounter_++);
      }
      return uniqueIdCounter_++;
    }

    /**
     * The identity function. Returns its first argument.
     * @param {*=} returnValue The single value that will be returned.
     * @return {?} The first argument.
     */
    function identityFunction(returnValue) {
      return returnValue;
    }

    /**
     * Returns true if the specified value is a boolean.
     * @param {?} val Variable to test.
     * @return {boolean} Whether variable is boolean.
     */
    function isBoolean(val) {
      return typeof val === 'boolean';
    }

    /**
     * Returns true if the specified value is not undefined.
     * @param {?} val Variable to test.
     * @return {boolean} Whether variable is defined.
     */
    function isDef(val) {
      return val !== undefined;
    }

    /**
     * Returns true if value is not undefined or null.
     * @param {*} val
     * @return {boolean}
     */
    function isDefAndNotNull(val) {
      return isDef(val) && !isNull(val);
    }

    /**
     * Returns true if value is a document.
     * @param {*} val
     * @return {boolean}
     */
    function isDocument(val) {
      return val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && val.nodeType === 9;
    }

    /**
     * Returns true if value is a document-fragment.
     * @param {*} val
     * @return {boolean}
     */
    function isDocumentFragment(val) {
      return val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && val.nodeType === 11;
    }

    /**
     * Returns true if value is a dom element.
     * @param {*} val
     * @return {boolean}
     */
    function isElement(val) {
      return val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && val.nodeType === 1;
    }

    /**
     * Returns true if the specified value is a function.
     * @param {?} val Variable to test.
     * @return {boolean} Whether variable is a function.
     */
    function isFunction(val) {
      return typeof val === 'function';
    }

    /**
     * Returns true if value is null.
     * @param {*} val
     * @return {boolean}
     */
    function isNull(val) {
      return val === null;
    }

    /**
     * Returns true if the specified value is a number.
     * @param {?} val Variable to test.
     * @return {boolean} Whether variable is a number.
     */
    function isNumber(val) {
      return typeof val === 'number';
    }

    /**
     * Returns true if value is a window.
     * @param {*} val
     * @return {boolean}
     */
    function isWindow(val) {
      return val !== null && val === val.window;
    }

    /**
     * Returns true if the specified value is an object. This includes arrays
     * and functions.
     * @param {?} val Variable to test.
     * @return {boolean} Whether variable is an object.
     */
    function isObject(val) {
      var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
      return type === 'object' && val !== null || type === 'function';
    }

    /**
     * Returns true if value is a Promise.
     * @param {*} val
     * @return {boolean}
     */
    function isPromise(val) {
      return val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && typeof val.then === 'function';
    }

    /**
     * Returns true if value is a string.
     * @param {*} val
     * @return {boolean}
     */
    function isString(val) {
      return typeof val === 'string' || val instanceof String;
    }

    /**
     * Sets to true if running inside Node.js environment with extra check for
     * `process.browser` to skip Karma runner environment. Karma environment has
     * `process` defined even though it runs on the browser.
     * @param {?Object} options Contains `checkEnv` property which if true, checks
     * the NODE_ENV variable. If NODE_ENV equals 'test', the function returns false.
     * @return {boolean}
     */
    function isServerSide() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { checkEnv: true };

      var serverSide = typeof process !== 'undefined' && !process.browser;
      if (serverSide && options.checkEnv) {
        serverSide = typeof process.env !== 'undefined' && true;
      }
      return serverSide;
    }

    /**
     * Null function used for default values of callbacks, etc.
     * @return {void} Nothing.
     */
    function nullFunction() {}
    //# sourceMappingURL=coreNamed.js.map
  }
});
//# sourceMappingURL=coreNamed.js.map
'use strict';

// This file exists just for backwards compatibility, making sure that old
// default imports for this file still work. It's best to use the named exports
// for each function instead though, since that allows bundlers like Rollup to
// reduce the bundle size by removing unused code.

Liferay.Loader.define('frontend-js-metal-web$metal@2.16.8/lib/core', ['module', 'exports', 'require', './coreNamed'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.core = undefined;

    var _coreNamed = require('./coreNamed');

    Object.keys(_coreNamed).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _coreNamed[key];
        }
      });
    });

    var core = _interopRequireWildcard(_coreNamed);

    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
          }
        }newObj.default = obj;return newObj;
      }
    }

    exports.default = core;
    exports.core = core;
    //# sourceMappingURL=core.js.map
  }
});
//# sourceMappingURL=core.js.map
'use strict';

/**
 * Set of utilities for array operations
 */

Liferay.Loader.define("frontend-js-metal-web$metal@2.16.8/lib/array/array", ['module', 'exports', 'require'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var array = function () {
			function array() {
				_classCallCheck(this, array);
			}

			_createClass(array, null, [{
				key: 'equal',

				/**
     * Checks if the given arrays have the same content.
     * @param {!Array<*>} arr1
     * @param {!Array<*>} arr2
     * @return {boolean}
     */
				value: function equal(arr1, arr2) {
					if (arr1 === arr2) {
						return true;
					}
					if (arr1.length !== arr2.length) {
						return false;
					}
					for (var i = 0; i < arr1.length; i++) {
						if (arr1[i] !== arr2[i]) {
							return false;
						}
					}
					return true;
				}

				/**
     * Returns the first value in the given array that isn't undefined.
     * @param {!Array} arr
     * @return {*}
     */

			}, {
				key: 'firstDefinedValue',
				value: function firstDefinedValue(arr) {
					for (var i = 0; i < arr.length; i++) {
						if (arr[i] !== undefined) {
							return arr[i];
						}
					}
				}

				/**
     * Transforms the input nested array to become flat.
     * @param {Array.<*|Array.<*>>} arr Nested array to flatten.
     * @param {Array.<*>=} output Optional output array.
     * @return {Array.<*>} Flat array.
     */

			}, {
				key: 'flatten',
				value: function flatten(arr) {
					var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

					for (var i = 0; i < arr.length; i++) {
						if (Array.isArray(arr[i])) {
							array.flatten(arr[i], output);
						} else {
							output.push(arr[i]);
						}
					}
					return output;
				}

				/**
     * Removes the first occurrence of a particular value from an array.
     * @param {Array.<T>} arr Array from which to remove value.
     * @param {T} obj Object to remove.
     * @return {boolean} True if an element was removed.
     * @template T
     */

			}, {
				key: 'remove',
				value: function remove(arr, obj) {
					var i = arr.indexOf(obj);
					var rv = void 0;
					if (rv = i >= 0) {
						array.removeAt(arr, i);
					}
					return rv;
				}

				/**
     * Removes from an array the element at index i
     * @param {Array} arr Array or array like object from which to remove value.
     * @param {number} i The index to remove.
     * @return {boolean} True if an element was removed.
     */

			}, {
				key: 'removeAt',
				value: function removeAt(arr, i) {
					return Array.prototype.splice.call(arr, i, 1).length === 1;
				}

				/**
     * Slices the given array, just like Array.prototype.slice, but this
     * is faster and working on all array-like objects (like arguments).
     * @param {!Object} arr Array-like object to slice.
     * @param {number} start The index that should start the slice.
     * @param {number=} end The index where the slice should end, not
     *   included in the final array. If not given, all elements after the
     *   start index will be included.
     * @return {!Array}
     */

			}, {
				key: 'slice',
				value: function slice(arr, start) {
					var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;

					var sliced = [];
					for (var i = start; i < end; i++) {
						sliced.push(arr[i]);
					}
					return sliced;
				}
			}]);

			return array;
		}();

		exports.default = array;
		//# sourceMappingURL=array.js.map
	}
});
//# sourceMappingURL=array.js.map
/* !
 * Polyfill from Google's Closure Library.
 * Copyright 2013 The Closure Library Authors. All Rights Reserved.
 */

'use strict';

Liferay.Loader.define('frontend-js-metal-web$metal@2.16.8/lib/async/async', ['module', 'exports', 'require', '../coreNamed'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _coreNamed = require('../coreNamed');

		var async = {};

		/**
   * Throw an item without interrupting the current execution context.  For
   * example, if processing a group of items in a loop, sometimes it is useful
   * to report an error while still allowing the rest of the batch to be
   * processed.
   * @param {*} exception
   */
		async.throwException = function (exception) {
			// Each throw needs to be in its own context.
			async.nextTick(function () {
				throw exception;
			});
		};

		/**
   * Fires the provided callback just before the current callstack unwinds, or as
   * soon as possible after the current JS execution context.
   * @param {function(this:THIS)} callback
   * @param {THIS=} context Object to use as the "this value" when calling
   *     the provided function.
   * @template THIS
   */
		async.run = function (callback, context) {
			if (!async.run.workQueueScheduled_) {
				// Nothing is currently scheduled, schedule it now.
				async.nextTick(async.run.processWorkQueue);
				async.run.workQueueScheduled_ = true;
			}

			async.run.workQueue_.push(new async.run.WorkItem_(callback, context));
		};

		/** @private {boolean} */
		async.run.workQueueScheduled_ = false;

		/** @private {!Array.<!async.run.WorkItem_>} */
		async.run.workQueue_ = [];

		/**
   * Run any pending async.run work items. This function is not intended
   * for general use, but for use by entry point handlers to run items ahead of
   * async.nextTick.
   */
		async.run.processWorkQueue = function () {
			// NOTE: additional work queue items may be pushed while processing.
			while (async.run.workQueue_.length) {
				// Don't let the work queue grow indefinitely.
				var workItems = async.run.workQueue_;
				async.run.workQueue_ = [];
				for (var i = 0; i < workItems.length; i++) {
					var workItem = workItems[i];
					try {
						workItem.fn.call(workItem.scope);
					} catch (e) {
						async.throwException(e);
					}
				}
			}

			// There are no more work items, reset the work queue.
			async.run.workQueueScheduled_ = false;
		};

		/**
   * @constructor
   * @final
   * @struct
   * @private
   *
   * @param {function()} fn
   * @param {Object|null|undefined} scope
   */
		async.run.WorkItem_ = function (fn, scope) {
			/** @const */
			this.fn = fn;
			/** @const */
			this.scope = scope;
		};

		/**
   * Fires the provided callbacks as soon as possible after the current JS
   * execution context. setTimeout(…, 0) always takes at least 5ms for legacy
   * reasons.
   * @param {function(this:SCOPE)} callback Callback function to fire as soon as
   *     possible.
   * @param {SCOPE=} context Object in whose scope to call the listener.
   * @template SCOPE
   */
		async.nextTick = function (callback, context) {
			var cb = callback;
			if (context) {
				cb = callback.bind(context);
			}
			cb = async.nextTick.wrapCallback_(cb);
			// Look for and cache the custom fallback version of setImmediate.
			if (!async.nextTick.setImmediate_) {
				if (typeof setImmediate === 'function' && (0, _coreNamed.isServerSide)({ checkEnv: false })) {
					async.nextTick.setImmediate_ = setImmediate;
				} else {
					// eslint-disable-next-line
					async.nextTick.setImmediate_ = async.nextTick.getSetImmediateEmulator_();
				}
			}
			async.nextTick.setImmediate_(cb);
		};

		/**
   * Cache for the setImmediate implementation.
   * @type {function(function())}
   * @private
   */
		async.nextTick.setImmediate_ = null;

		/**
   * Determines the best possible implementation to run a function as soon as
   * the JS event loop is idle.
   * @return {function(function())} The "setImmediate" implementation.
   * @private
   */
		async.nextTick.getSetImmediateEmulator_ = function () {
			// Create a private message channel and use it to postMessage empty messages
			// to ourselves.
			var Channel = void 0;

			// Verify if variable is defined on the current runtime (i.e., node, browser).
			// Can't use typeof enclosed in a function (such as core.isFunction) or an
			// exception will be thrown when the function is called on an environment
			// where the variable is undefined.
			if (typeof MessageChannel === 'function') {
				Channel = MessageChannel;
			}

			// If MessageChannel is not available and we are in a browser, implement
			// an iframe based polyfill in browsers that have postMessage and
			// document.addEventListener. The latter excludes IE8 because it has a
			// synchronous postMessage implementation.
			if (typeof Channel === 'undefined' && typeof window !== 'undefined' && window.postMessage && window.addEventListener) {
				/** @constructor */
				Channel = function Channel() {
					// Make an empty, invisible iframe.
					var iframe = document.createElement('iframe');
					iframe.style.display = 'none';
					iframe.src = '';
					iframe.title = '';
					document.documentElement.appendChild(iframe);
					var win = iframe.contentWindow;
					var doc = win.document;
					doc.open();
					doc.write('');
					doc.close();
					var message = 'callImmediate' + Math.random();
					var origin = win.location.protocol + '//' + win.location.host;
					var onmessage = function (e) {
						// Validate origin and message to make sure that this message was
						// intended for us.
						if (e.origin !== origin && e.data !== message) {
							return;
						}
						this.port1.onmessage();
					}.bind(this);
					win.addEventListener('message', onmessage, false);
					this.port1 = {};
					this.port2 = {
						postMessage: function postMessage() {
							win.postMessage(message, origin);
						}
					};
				};
			}
			if (typeof Channel !== 'undefined') {
				var channel = new Channel();
				// Use a fifo linked list to call callbacks in the right order.
				var head = {};
				var tail = head;
				channel.port1.onmessage = function () {
					head = head.next;
					var cb = head.cb;
					head.cb = null;
					cb();
				};
				return function (cb) {
					tail.next = {
						cb: cb
					};
					tail = tail.next;
					channel.port2.postMessage(0);
				};
			}
			// Implementation for IE6-8: Script elements fire an asynchronous
			// onreadystatechange event when inserted into the DOM.
			if (typeof document !== 'undefined' && 'onreadystatechange' in document.createElement('script')) {
				return function (cb) {
					var script = document.createElement('script');
					script.onreadystatechange = function () {
						// Clean up and call the callback.
						script.onreadystatechange = null;
						script.parentNode.removeChild(script);
						script = null;
						cb();
						cb = null;
					};
					document.documentElement.appendChild(script);
				};
			}
			// Fall back to setTimeout with 0. In browsers this creates a delay of 5ms
			// or more.
			return function (cb) {
				setTimeout(cb, 0);
			};
		};

		/**
   * Helper function that is overrided to protect callbacks with entry point
   * monitor if the application monitors entry points.
   * @param {function()} callback Callback function to fire as soon as possible.
   * @return {function()} The wrapped callback.
   * @private
   */
		async.nextTick.wrapCallback_ = function (callback) {
			return callback;
		};

		exports.default = async;
		//# sourceMappingURL=async.js.map
	}
});
//# sourceMappingURL=async.js.map
'use strict';

/**
 * Disposable utility. When inherited provides the `dispose` function to its
 * subclass, which is responsible for disposing of any object references
 * when an instance won't be used anymore. Subclasses should override
 * `disposeInternal` to implement any specific disposing logic.
 * @constructor
 */

Liferay.Loader.define("frontend-js-metal-web$metal@2.16.8/lib/disposable/Disposable", ['module', 'exports', 'require'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var Disposable = function () {
			/**
    * Disposable constructor
    */
			function Disposable() {
				_classCallCheck(this, Disposable);

				/**
     * Flag indicating if this instance has already been disposed.
     * @type {boolean}
     * @protected
     */
				this.disposed_ = false;
			}

			/**
    * Disposes of this instance's object references. Calls `disposeInternal`.
    */

			_createClass(Disposable, [{
				key: 'dispose',
				value: function dispose() {
					if (!this.disposed_) {
						this.disposeInternal();
						this.disposed_ = true;
					}
				}

				/**
     * Subclasses should override this method to implement any specific
     * disposing logic (like clearing references and calling `dispose` on other
     * disposables).
     */

			}, {
				key: 'disposeInternal',
				value: function disposeInternal() {}

				/**
     * Checks if this instance has already been disposed.
     * @return {boolean}
     */

			}, {
				key: 'isDisposed',
				value: function isDisposed() {
					return this.disposed_;
				}
			}]);

			return Disposable;
		}();

		exports.default = Disposable;
		//# sourceMappingURL=Disposable.js.map
	}
});
//# sourceMappingURL=Disposable.js.map
'use strict';

/**
 * Set of utilities for object operations
 */

Liferay.Loader.define("frontend-js-metal-web$metal@2.16.8/lib/object/object", ['module', 'exports', 'require'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var object = function () {
			function object() {
				_classCallCheck(this, object);
			}

			_createClass(object, null, [{
				key: 'mixin',

				/**
     * Copies all the members of a source object to a target object.
     * @param {Object} target Target object.
     * @param {...Object} var_args The objects from which values will be copied.
     * @return {Object} Returns the target object reference.
     */
				value: function mixin(target) {
					var key = void 0;
					var source = void 0;

					for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
						args[_key - 1] = arguments[_key];
					}

					for (var i = 0; i < args.length; i++) {
						source = args[i];
						// Possible prototype chain leak, breaks 1 metal-dom and
						// 1 metal-incremental-dom test if guard-for-in rule is addressed
						// eslint-disable-next-line
						for (key in source) {
							target[key] = source[key];
						}
					}
					return target;
				}

				/**
     * Returns an object based on its fully qualified external name.
     * @param {string} name The fully qualified name.
     * @param {object=} scope The object within which to look; default is
     *     <code>window</code>.
     * @return {?} The value (object or primitive) or, if not found, undefined.
     */

			}, {
				key: 'getObjectByName',
				value: function getObjectByName(name) {
					var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;

					var parts = name.split('.');
					return parts.reduce(function (part, key) {
						return part[key];
					}, scope);
				}

				/**
     * Returns a new object with the same keys as the given one, but with
     * their values set to the return values of the specified function.
     * @param {!Object} obj
     * @param {!function(string, *)} fn
     * @return {!Object}
     */

			}, {
				key: 'map',
				value: function map(obj, fn) {
					var mappedObj = {};
					var keys = Object.keys(obj);
					for (var i = 0; i < keys.length; i++) {
						mappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);
					}
					return mappedObj;
				}

				/**
     * Checks if the two given objects are equal. This is done via a shallow
     * check, including only the keys directly contained by the 2 objects.
     * @param {Object} obj1
     * @param {Object} obj2
     * @return {boolean}
     */

			}, {
				key: 'shallowEqual',
				value: function shallowEqual(obj1, obj2) {
					if (obj1 === obj2) {
						return true;
					}

					var keys1 = Object.keys(obj1);
					var keys2 = Object.keys(obj2);
					if (keys1.length !== keys2.length) {
						return false;
					}

					for (var i = 0; i < keys1.length; i++) {
						if (obj1[keys1[i]] !== obj2[keys1[i]]) {
							return false;
						}
					}
					return true;
				}
			}]);

			return object;
		}();

		exports.default = object;
		//# sourceMappingURL=object.js.map
	}
});
//# sourceMappingURL=object.js.map
'use strict';

/**
 * Set of utilities for string operations
 */

Liferay.Loader.define("frontend-js-metal-web$metal@2.16.8/lib/string/string", ['module', 'exports', 'require'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var string = function () {
			function string() {
				_classCallCheck(this, string);
			}

			_createClass(string, null, [{
				key: 'caseInsensitiveCompare',

				/**
     * Compares the given strings without taking the case into account.
     * @param {string|number} str1
     * @param {string|number} str2
     * @return {number} Either -1, 0 or 1, according to if the first string is
     *     "smaller", equal or "bigger" than the second given string.
     */
				value: function caseInsensitiveCompare(str1, str2) {
					var test1 = String(str1).toLowerCase();
					var test2 = String(str2).toLowerCase();

					if (test1 < test2) {
						return -1;
					} else if (test1 === test2) {
						return 0;
					} else {
						return 1;
					}
				}

				/**
     * Removes the breaking spaces from the left and right of the string and
     * collapses the sequences of breaking spaces in the middle into single spaces.
     * The original and the result strings render the same way in HTML.
     * @param {string} str A string in which to collapse spaces.
     * @return {string} Copy of the string with normalized breaking spaces.
     */

			}, {
				key: 'collapseBreakingSpaces',
				value: function collapseBreakingSpaces(str) {
					return str.replace(/[\t\r\n ]+/g, ' ').replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, '');
				}

				/**
     * Escapes characters in the string that are not safe to use in a RegExp.
     * @param {*} str The string to escape. If not a string, it will be casted
     *     to one.
     * @return {string} A RegExp safe, escaped copy of {@code s}.
     */

			}, {
				key: 'escapeRegex',
				value: function escapeRegex(str) {
					return String(str).replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08'); // eslint-disable-line
				}

				/**
     * Returns a string with at least 64-bits of randomness.
     * @return {string} A random string, e.g. sn1s7vb4gcic.
     */

			}, {
				key: 'getRandomString',
				value: function getRandomString() {
					var x = 2147483648;
					return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ Date.now()).toString(36);
				}

				/**
     * Calculates the hashcode for a string. The hashcode value is computed by
     * the sum algorithm: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]. A nice
     * property of using 31 prime is that the multiplication can be replaced by
     * a shift and a subtraction for better performance: 31*i == (i<<5)-i.
     * Modern VMs do this sort of optimization automatically.
     * @param {String} val Target string.
     * @return {Number} Returns the string hashcode.
     */

			}, {
				key: 'hashCode',
				value: function hashCode(val) {
					var hash = 0;
					for (var i = 0, len = val.length; i < len; i++) {
						hash = 31 * hash + val.charCodeAt(i);
						hash %= 0x100000000;
					}
					return hash;
				}

				/**
     * Replaces interval into the string with specified value, e.g.
     * `replaceInterval("abcde", 1, 4, "")` returns "ae".
     * @param {string} str The input string.
     * @param {Number} start Start interval position to be replaced.
     * @param {Number} end End interval position to be replaced.
     * @param {string} value The value that replaces the specified interval.
     * @return {string}
     */

			}, {
				key: 'replaceInterval',
				value: function replaceInterval(str, start, end, value) {
					return str.substring(0, start) + value + str.substring(end);
				}
			}]);

			return string;
		}();

		exports.default = string;
		//# sourceMappingURL=string.js.map
	}
});
//# sourceMappingURL=string.js.map
'use strict';

Liferay.Loader.define('frontend-js-metal-web$metal@2.16.8/lib/metal', ['module', 'exports', 'require', './core', './array/array', './async/async', './disposable/Disposable', './object/object', './string/string'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.string = exports.object = exports.Disposable = exports.async = exports.array = undefined;

    var _core = require('./core');

    Object.keys(_core).forEach(function (key) {
      if (key === "default" || key === "__esModule") return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
          return _core[key];
        }
      });
    });

    var _core2 = _interopRequireDefault(_core);

    var _array = require('./array/array');

    var _array2 = _interopRequireDefault(_array);

    var _async = require('./async/async');

    var _async2 = _interopRequireDefault(_async);

    var _Disposable = require('./disposable/Disposable');

    var _Disposable2 = _interopRequireDefault(_Disposable);

    var _object = require('./object/object');

    var _object2 = _interopRequireDefault(_object);

    var _string = require('./string/string');

    var _string2 = _interopRequireDefault(_string);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    exports.array = _array2.default;
    exports.async = _async2.default;
    exports.Disposable = _Disposable2.default;
    exports.object = _object2.default;
    exports.string = _string2.default;
    exports.default = _core2.default;
    //# sourceMappingURL=metal.js.map
  }
});
//# sourceMappingURL=metal.js.map
Liferay.Loader.define("frontend-js-web@4.0.38/liferay/util/form/object_to_form_data.es", ['module', 'exports', 'require', 'frontend-js-metal-web$metal'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = objectToFormData;

    var _metal = require("frontend-js-metal-web$metal");

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }return obj;
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }

    function _iterableToArrayLimit(arr, i) {
      if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
        return;
      }var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    /**
     * Returns a FormData containing serialized object.
     * @param {!Object} obj Object to convert to a FormData
     * @param {FormData=} formData FormData object to recursively append the serialized data
     * @param {string=} namespace Property namespace for nested objects or arrays
     * @return {FormData} FormData with the serialized object
     * @review
     */
    function objectToFormData() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var formData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new FormData();
      var namespace = arguments.length > 2 ? arguments[2] : undefined;
      Object.entries(obj).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        var formKey = namespace ? "".concat(namespace, "[").concat(key, "]") : key;

        if (Array.isArray(value)) {
          value.forEach(function (item) {
            objectToFormData(_defineProperty({}, formKey, item), formData);
          });
        } else if ((0, _metal.isObject)(value) && !(value instanceof File)) {
          objectToFormData(value, formData, formKey);
        } else {
          formData.append(formKey, value);
        }
      });
      return formData;
    }
    //# sourceMappingURL=object_to_form_data.es.js.map
  }
});
//# sourceMappingURL=object_to_form_data.es.js.map
Liferay.Loader.define("frontend-js-web@4.0.38/liferay/breakpoints", ['module', 'exports', 'require'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */
    var _default = {
      PHONE: 768,
      TABLET: 980
    };
    exports.default = _default;
    //# sourceMappingURL=breakpoints.js.map
  }
});
//# sourceMappingURL=breakpoints.js.map
'use strict';

Liferay.Loader.define("frontend-js-metal-web$metal-state@2.16.8/lib/validators", ['module', 'exports', 'require', 'frontend-js-metal-web$metal'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
			return typeof obj;
		} : function (obj) {
			return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		};

		var _metal = require("frontend-js-metal-web$metal");

		var ERROR_OBJECT_OF_TYPE = 'Expected object of one type.';
		var ERROR_ONE_OF = 'Expected one of the following values:';
		var ERROR_ONE_OF_TYPE = 'Expected one of given types.';

		/**
   * Provides access to various type validators that will return an
   * instance of Error when validation fails. Note that all type validators
   * will also accept null or undefined values. To not accept these you should
   * instead make your state property required.
   */
		var validators = {
			any: function any() {
				return function () {
					return true;
				};
			},
			array: buildTypeValidator('array'),
			bool: buildTypeValidator('boolean'),
			func: buildTypeValidator('function'),
			number: buildTypeValidator('number'),
			object: buildTypeValidator('object'),
			string: buildTypeValidator('string'),

			/**
    * Creates a validator that checks that the value it receives is an array
    * of items, and that all of the items pass the given validator.
    * @param {!function()} validator Validator to check each item against.
    * @return {!function()}
    */
			arrayOf: function arrayOf(validator) {
				if (isInvalid(validators.func(validator))) {
					throwConfigError('function', validator, 'arrayOf');
				}
				return maybe(function (value, name, context) {
					var result = validators.array(value, name, context);
					if (isInvalid(result)) {
						return result;
					}
					return validateArrayItems(validator, value, name, context);
				});
			},

			/**
    * Creates a validator that checks for a value within a range.
    * @param {!Number} min The minimum value allowed.
    * @param {!Number} max The maximum value allowed.
    * @return {!function()}
    */
			inRange: function inRange(min, max) {
				var minResult = validators.number(min);
				var maxResult = validators.number(max);
				if (isInvalid(minResult)) {
					return minResult;
				}
				if (isInvalid(maxResult)) {
					return maxResult;
				}
				return maybe(function (value) {
					var valueResult = validators.number(value);
					if (isInvalid(valueResult)) {
						return valueResult;
					}
					return value >= min && value <= max;
				});
			},

			/**
    * Creates a validator that checks if a value is an instance of a given class.
    * @param {!function()} expectedClass Class to check value against.
    * @return {!function()}
    */
			instanceOf: function instanceOf(expectedClass) {
				return maybe(function (value, name, context) {
					if (value instanceof expectedClass) {
						return true;
					}

					return composeError('Expected instance of ' + expectedClass, name, context);
				});
			},

			/**
    * Creates a validator that checks that the value it receives is an object,
    * and that all values within that object pass the given validator.
    * @param {!function()} validator Validator to check each object value against.
    * @return {!function()}
    */
			objectOf: function objectOf(validator) {
				if (isInvalid(validators.func(validator))) {
					throwConfigError('function', validator, 'objectOf');
				}
				return maybe(function (value, name, context) {
					for (var key in value) {
						if (isInvalid(validator(value[key]))) {
							return composeError(ERROR_OBJECT_OF_TYPE, name, context);
						}
					}
					return true;
				});
			},

			/**
    * Creates a validator that checks if the received value matches one of the
    * given values.
    * @param {!Array} arrayOfValues Array of values to check equality against.
    * @return {!function()}
    */
			oneOf: function oneOf(arrayOfValues) {
				return maybe(function (value, name, context) {
					var result = validators.array(arrayOfValues, name, context);
					if (isInvalid(result)) {
						return result;
					}
					return arrayOfValues.indexOf(value) === -1 ? composeError(composeOneOfErrorMessage(arrayOfValues), name, context) // eslint-disable-line
					: true;
				});
			},

			/**
    * Creates a validator that checks if the received value matches one of the
    * given types.
    * @param {!Array} arrayOfTypeValidators Array of validators to check value
    *     against.
    * @return {!function()}
    */
			oneOfType: function oneOfType(arrayOfTypeValidators) {
				return maybe(function (value, name, context) {
					var result = validators.array(arrayOfTypeValidators, name, context); // eslint-disable-line
					if (isInvalid(result)) {
						return result;
					}

					for (var i = 0; i < arrayOfTypeValidators.length; i++) {
						// eslint-disable-next-line
						if (!isInvalid(arrayOfTypeValidators[i](value, name, context))) {
							return true;
						}
					}
					return composeError(ERROR_ONE_OF_TYPE, name, context);
				});
			},

			/**
    * Creates a validator that checks if the received value is an object, and
    * that its contents match the given shape.
    * @param {!Object} shape An object containing validators for each key.
    * @return {!function()}
    */
			shapeOf: function shapeOf(shape) {
				if (isInvalid(validators.object(shape))) {
					throwConfigError('object', shape, 'shapeOf');
				}
				return maybe(function (value, name, context) {
					var valueResult = validators.object(value, name, context);
					if (isInvalid(valueResult)) {
						return valueResult;
					}
					for (var key in shape) {
						if (Object.prototype.hasOwnProperty.call(shape, key)) {
							var validator = shape[key];
							var required = false;
							if (validator.config) {
								required = validator.config.required;
								validator = validator.config.validator;
							}
							if (required && !(0, _metal.isDefAndNotNull)(value[key]) || isInvalid(validator(value[key]))) {
								return validator(value[key], name + '.' + key, context);
							}
						}
					}
					return true;
				});
			}
		};

		/**
   * Creates a validator that checks against a specific primitive type.
   * @param {string} expectedType Type to check against.
   * @return {!function()} Function that runs the validator if called with
   *     arguments, or just returns it otherwise. This means that when using a
   *     type validator in `State` it may be just passed directly (like
   *     `validators.bool`), or called with no args (like `validators.bool()`).
   *     That's done to allow all validators to be used consistently, since some
   *     (like `arrayOf`) always require that you call the function before
   *     receiving the actual validator. Type validators don't need the call, but
   *     work if it's made anyway.
   */
		function buildTypeValidator(expectedType) {
			var validatorFn = maybe(validateType.bind(null, expectedType));
			return function () {
				if (arguments.length === 0) {
					return validatorFn;
				} else {
					return validatorFn.apply(undefined, arguments);
				}
			};
		}

		/**
   * Composes a warning a warning message.
   * @param {string} error Error message to display to console.
   * @param {?string} name Name of state property that is giving the error.
   * @param {Object} context The property's owner.
   * @return {!Error}
   */
		function composeError(error, name, context) {
			var compName = context ? (0, _metal.getFunctionName)(context.constructor) : null;
			var renderer = context && context.getRenderer && context.getRenderer();
			var parent = renderer && renderer.getParent && renderer.getParent();
			var parentName = parent ? (0, _metal.getFunctionName)(parent.constructor) : null;
			var location = parentName ? 'Check render method of \'' + parentName + '\'.' : '';
			return new Error('Invalid state passed to \'' + name + '\'.' + (' ' + error + ' Passed to \'' + compName + '\'. ' + location));
		}

		/**
   * Composes an error message for Config.oneOf validator.
   * @param {!Array} arrayOfValues Array of values to check equality against.
   * @return {!Error}
   */
		function composeOneOfErrorMessage(arrayOfValues) {
			return ERROR_ONE_OF + ' ' + JSON.stringify(arrayOfValues) + '.';
		}

		/**
   * Returns the type of the given value.
   * @param {*} value Any value.
   * @return {string} Type of value.
   */
		function getType(value) {
			return Array.isArray(value) ? 'array' : typeof value === 'undefined' ? 'undefined' : _typeof(value);
		}

		/**
   * Checks if the given validator result says that the value is invalid.
   * @param {boolean|!Error} result
   * @return {boolean}
   */
		function isInvalid(result) {
			return result instanceof Error;
		}

		/**
   * Wraps the given validator so that it also accepts null/undefined values.
   *   a validator that checks a value against a single type, null, or
   * undefined.
   * @param {!function()} typeValidator Validator to wrap.
   * @return {!function()} Wrapped validator.
   */
		function maybe(typeValidator) {
			return function (value, name, context) {
				return (0, _metal.isDefAndNotNull)(value) ? typeValidator(value, name, context) : true; // eslint-disable-line
			};
		}

		/**
   * Throws error if validator is invoked with incorrect type.
   * @param {string} expectedType String representing the expected type.
   * @param {*} value The value to match the type of.
   * @param {!string} name Name of the function the validator is intended for.
   */
		function throwConfigError(expectedType, value, name) {
			var type = getType(value);
			throw new Error('Expected type ' + expectedType + ', but received type ' + type + '. passed to ' + name + '.');
		}

		/**
   * Checks if all the items of the given array pass the given validator.
   * @param {!function()} validator
   * @param {*} value The array to validate items for.
   * @param {string} name The name of the array property being checked.
   * @param {!Object} context Owner of the array property being checked.
   * @return {!Error|boolean} `true` if the type matches, or an error otherwise.
   */
		function validateArrayItems(validator, value, name, context) {
			for (var i = 0; i < value.length; i++) {
				if (isInvalid(validator(value[i], name, context))) {
					var itemValidatorError = validator(value[i], name, context);
					var errorMessage = 'Validator for ' + name + '[' + i + '] says: "' + itemValidatorError + '"';
					return composeError(errorMessage, name, context);
				}
			}
			return true;
		}

		/**
   * Checks if the given value matches the expected type.
   * @param {string} expectedType String representing the expected type.
   * @param {*} value The value to match the type of.
   * @param {string} name The name of the property being checked.
   * @param {!Object} context Owner of the property being checked.
   * @return {!Error|boolean} `true` if the type matches, or an error otherwise.
   */
		function validateType(expectedType, value, name, context) {
			var type = getType(value);
			if (type !== expectedType) {
				return composeError('Expected type \'' + expectedType + '\', but received type \'' + type + '\'.', name, context);
			}
			return true;
		}

		exports.default = validators;
		//# sourceMappingURL=validators.js.map
	}
});
//# sourceMappingURL=validators.js.map
'use strict';

Liferay.Loader.define('frontend-js-metal-web$metal-state@2.16.8/lib/Config', ['module', 'exports', 'require', './validators'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _validators = require('./validators');

    var _validators2 = _interopRequireDefault(_validators);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    /**
     * Sugar api that can be used as an alternative for manually building `State`
     * configuration in the expected format. For example, instead of having
     * something like this:
     *
     * ```js
     * MyClass.STATE = {
     *   foo: {
     *     required: true,
     *     validator: validators.number,
     *     value: 13
     *   }
     * };
     * ```
     *
     * You could instead do:
     *
     * ```js
     * MyClass.STATE = {
     *   foo: Config.required().number().value(13)
     * };
     * ```
     */
    var Config = {
      /**
       * An object that contains a validator function.
       * @typedef {!Object} ConfigWithValidator
       */

      /**
       * Function that creates `State` object with an `any` validator.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      any: setPrimitiveValidators('any'),

      /**
       * Function that creates `State` object with an `array` validator.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      array: setPrimitiveValidators('array'),

      /**
       * Function that creates `State` object with an `arrayOf` validator.
       * @param {ConfigWithValidator} stateConfig `State` configuration object
       * @return {ConfigWithValidator} `State` configuration object.
       */
      arrayOf: setNestedValidators('arrayOf'),

      /**
       * Function that creates `State` object with a `bool` validator.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      bool: setPrimitiveValidators('bool'),

      /**
       * Function that creates `State` object with a `func` validator.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      func: setPrimitiveValidators('func'),

      /**
       * Creates `State` configuration object with a `rangeOf` validator.
       * @param {!Number} min The minimum value allowed.
       * @param {!Number} max The maximum value allowed.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      inRange: function inRange(min, max) {
        return this.validator(_validators2.default.inRange(min, max));
      },

      /**
       * Function that creates `State` object with an `instanceOf` validator.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      instanceOf: setExplicitValueValidators('instanceOf'),

      /**
       * Function that creates `State` object with a `number` validator.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      number: setPrimitiveValidators('number'),

      /**
       * Function that creates `State` object with an `object` validator.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      object: setPrimitiveValidators('object'),

      /**
       * Function that creates `State` object with an `objectOf` validator.
       * @param {ConfigWithValidator} stateConfig `State` configuration object
       * @return {ConfigWithValidator} `State` configuration object.
       */
      objectOf: setNestedValidators('objectOf'),

      /**
       * Function that creates `State` object with an `oneOf` validator.
       * @param {!Array} values `State` configuration object
       * @return {ConfigWithValidator} `State` configuration object.
       */
      oneOf: setExplicitValueValidators('oneOf'),

      /**
       * Creates `State` configuration object with an `oneOfType` validator.
       * @param {ConfigWithValidator[]} validatorArray Array of `State` configuration objects.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      oneOfType: function oneOfType(validatorArray) {
        validatorArray = validatorArray.map(function (configObj) {
          return configObj.config.validator;
        });

        return this.validator(_validators2.default.oneOfType(validatorArray));
      },

      /**
       * Creates `State` configuration object with a `shapeOf` validator.
       * @param {!Object.<string, ConfigWithValidator>} shapeObj Values being `State` configuration objects.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      shapeOf: function shapeOf(shapeObj) {
        shapeObj = destructShapeOfConfigs(shapeObj);

        return this.validator(_validators2.default.shapeOf(shapeObj));
      },

      /**
       * Function that creates `State` object with an `string` validator.
       * @return {ConfigWithValidator} `State` configuration object.
       */
      string: setPrimitiveValidators('string'),

      /**
       * Adds the `internal` flag to the `State` configuration.
       * @param {boolean} internal Flag to set "internal" to. True by default.
       * @return {!Object} `State` configuration object.
       */
      internal: function internal() {
        var internal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        return mergeConfig(this, {
          internal: internal
        });
      },

      /**
       * Adds the `required` flag to the `State` configuration.
       * @param {boolean} required Flag to set "required" to. True by default.
       * @return {!Object} `State` configuration object.
       */
      required: function required() {
        var required = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        return mergeConfig(this, {
          required: required
        });
      },

      /**
       * Adds a setter to the `State` configuration.
       * @param {!function()} setter
       * @return {!Object} `State` configuration object.
       */
      setter: function setter(_setter) {
        return mergeConfig(this, {
          setter: _setter
        });
      },

      /**
       * Adds a validator to the `State` configuration.
       * @param {!function()} validator
       * @return {!Object} `State` configuration object.
       */
      validator: function validator(_validator) {
        return mergeConfig(this, {
          validator: _validator
        });
      },

      /**
       * Adds a default value to the `State` configuration.
       * @param {*} value
       * @return {!Object} `State` configuration object.
       */
      value: function value(_value) {
        return mergeConfig(this, {
          value: _value
        });
      },

      /**
       * Adds a valueFn that will return a default value for the `State` configuration.
       * @param {!function()} valueFn
       * @return {!Object} `State` configuration object.
       */
      valueFn: function valueFn(_valueFn) {
        return mergeConfig(this, {
          valueFn: _valueFn
        });
      },

      /**
       * Adds the `writeOnce` flag to the `State` configuration.
       * @param {boolean} writeOnce Flag to set "writeOnce" to. False by default.
       * @return {!Object} `State` configuration object.
       */
      writeOnce: function writeOnce() {
        var writeOnce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        return mergeConfig(this, {
          writeOnce: writeOnce
        });
      }
    };

    /**
     * Recursively sets validators for shapeOf.
     * @param {!Object} shape The shape of specific types.
     * @return {!Object} Shape object with validators as values.
     */
    function destructShapeOfConfigs(shape) {
      var keys = Object.keys(shape);

      var retShape = {};

      keys.forEach(function (key) {
        var value = shape[key];

        retShape[key] = value.config && value.config.validator ? value.config.validator : destructShapeOfConfigs(value);
      });

      return retShape;
    }

    /**
     * Merges the given config object into the one that has been built so far.
     * @param {!Object} context The object calling this function.
     * @param {!Object} config The object to merge to the built config.
     * @return {!Object} The final object containing the built config.
     */
    function mergeConfig(context, config) {
      var obj = context;
      var objConfig = obj.config || {};

      obj = Object.create(Config);
      obj.config = {};

      Object.assign(obj.config, objConfig, config);
      return obj;
    }

    /**
     * Calls validators with provided argument.
     * @param {string} name The name of the validator.
     * @return {function()}
     */
    function setExplicitValueValidators(name) {
      return function (arg) {
        return this.validator(_validators2.default[name](arg));
      };
    }

    /**
     * Calls validators with a single nested config.
     * @param {string} name The name of the validator.
     * @return {!function()}
     */
    function setNestedValidators(name) {
      return function (arg) {
        return this.validator(_validators2.default[name](arg.config.validator));
      };
    }

    /**
     * Adds primitive type validators to the config object.
     * @param {string} name The name of the validator.
     * @return {!function()}
     */
    function setPrimitiveValidators(name) {
      return function () {
        return this.validator(_validators2.default[name]);
      };
    }

    exports.default = Config;
    //# sourceMappingURL=Config.js.map
  }
});
//# sourceMappingURL=Config.js.map
'use strict';

Liferay.Loader.define("frontend-js-metal-web$metal-events@2.16.8/lib/EventHandle", ['module', 'exports', 'require', 'frontend-js-metal-web$metal'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		var _metal = require("frontend-js-metal-web$metal");

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		/**
   * EventHandle utility. Holds information about an event subscription, and
   * allows removing them easily.
   * EventHandle is a Disposable, but it's important to note that the
   * EventEmitter that created it is not the one responsible for disposing it.
   * That responsibility is for the code that holds a reference to it.
   * @extends {Disposable}
   */
		var EventHandle = function (_Disposable) {
			_inherits(EventHandle, _Disposable);

			/**
    * EventHandle constructor
    * @param {!EventEmitter} emitter Emitter the event was subscribed to.
    * @param {string} event The name of the event that was subscribed to.
    * @param {!Function} listener The listener subscribed to the event.
    */
			function EventHandle(emitter, event, listener) {
				_classCallCheck(this, EventHandle);

				/**
     * The EventEmitter instance that the event was subscribed to.
     * @type {EventEmitter}
     * @protected
     */
				var _this = _possibleConstructorReturn(this, (EventHandle.__proto__ || Object.getPrototypeOf(EventHandle)).call(this));

				_this.emitter_ = emitter;

				/**
     * The name of the event that was subscribed to.
     * @type {string}
     * @protected
     */
				_this.event_ = event;

				/**
     * The listener subscribed to the event.
     * @type {Function}
     * @protected
     */
				_this.listener_ = listener;
				return _this;
			}

			/**
    * Disposes of this instance's object references.
    * @override
    */

			_createClass(EventHandle, [{
				key: 'disposeInternal',
				value: function disposeInternal() {
					this.removeListener();
					this.emitter_ = null;
					this.listener_ = null;
				}

				/**
     * Removes the listener subscription from the emitter.
     */

			}, {
				key: 'removeListener',
				value: function removeListener() {
					if (!this.emitter_.isDisposed()) {
						this.emitter_.removeListener(this.event_, this.listener_);
					}
				}
			}]);

			return EventHandle;
		}(_metal.Disposable);

		exports.default = EventHandle;
		//# sourceMappingURL=EventHandle.js.map
	}
});
//# sourceMappingURL=EventHandle.js.map
'use strict';

Liferay.Loader.define("frontend-js-metal-web$metal-events@2.16.8/lib/EventEmitter", ['module', 'exports', 'require', 'frontend-js-metal-web$metal', './EventHandle'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		var _metal = require("frontend-js-metal-web$metal");

		var _EventHandle = require('./EventHandle');

		var _EventHandle2 = _interopRequireDefault(_EventHandle);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var singleArray_ = [0];

		/**
   * EventEmitter utility.
   * @extends {Disposable}
   */

		var EventEmitter = function (_Disposable) {
			_inherits(EventEmitter, _Disposable);

			/**
    * EventEmitter constructor
    */
			function EventEmitter() {
				_classCallCheck(this, EventEmitter);

				/**
     * Holds event listeners scoped by event type.
     * @type {Object<string, !Array<!function()>>}
     * @protected
     */
				var _this = _possibleConstructorReturn(this, (EventEmitter.__proto__ || Object.getPrototypeOf(EventEmitter)).call(this));

				_this.events_ = null;

				/**
     * Handlers that are triggered when an event is listened to.
     * @type {Array}
     */
				_this.listenerHandlers_ = null;

				/**
     * Configuration option which determines if an event facade should be sent
     * as a param of listeners when emitting events. If set to true, the facade
     * will be passed as the first argument of the listener.
     * @type {boolean}
     * @protected
     */
				_this.shouldUseFacade_ = false;
				return _this;
			}

			/**
    * Adds a handler to given holder variable. If the holder doesn't have a
    * value yet, it will receive the handler directly. If the holder is an array,
    * the value will just be added to it. Otherwise, the holder will be set to a
    * new array containing its previous value plus the new handler.
    * @param {*} holder
    * @param {!function()|Object} handler
    * @return {*} The holder's new value.
    * @protected
    */

			_createClass(EventEmitter, [{
				key: 'addHandler_',
				value: function addHandler_(holder, handler) {
					if (!holder) {
						holder = handler;
					} else {
						if (!Array.isArray(holder)) {
							holder = [holder];
						}
						holder.push(handler);
					}
					return holder;
				}

				/**
     * Adds a listener to the end of the listeners array for the specified events.
     * @param {!(Array|string)} event
     * @param {!Function} listener
     * @param {boolean} defaultListener Flag indicating if this listener is a default
     *   action for this event. Default actions are run last, and only if no previous
     *   listener call `preventDefault()` on the received event facade.
     * @return {!EventHandle} Can be used to remove the listener.
     */

			}, {
				key: 'addListener',
				value: function addListener(event, listener, defaultListener) {
					this.validateListener_(listener);

					var events = this.toEventsArray_(event);
					for (var i = 0; i < events.length; i++) {
						this.addSingleListener_(events[i], listener, defaultListener);
					}

					return new _EventHandle2.default(this, event, listener);
				}

				/**
     * Adds a listener to the end of the listeners array for a single event.
     * @param {string} event
     * @param {!Function} listener
     * @param {boolean} defaultListener Flag indicating if this listener is a default
     *   action for this event. Default actions are run last, and only if no previous
     *   listener call `preventDefault()` on the received event facade.
     * @param {Function=} origin The original function that was added as a
     *   listener, if there is any.
     * @protected
     */

			}, {
				key: 'addSingleListener_',
				value: function addSingleListener_(event, listener, defaultListener, origin) {
					this.runListenerHandlers_(event);
					if (defaultListener || origin) {
						listener = {
							default: defaultListener,
							fn: listener,
							origin: origin
						};
					}
					this.events_ = this.events_ || {};
					this.events_[event] = this.addHandler_(this.events_[event], listener);
				}

				/**
     * Builds facade for the given event.
     * @param {string} event
     * @return {Object}
     * @protected
     */

			}, {
				key: 'buildFacade_',
				value: function buildFacade_(event) {
					if (this.getShouldUseFacade()) {
						var facade = {
							preventDefault: function preventDefault() {
								facade.preventedDefault = true;
							},
							target: this,
							type: event
						};
						return facade;
					}
				}

				/**
     * Disposes of this instance's object references.
     * @override
     */

			}, {
				key: 'disposeInternal',
				value: function disposeInternal() {
					this.events_ = null;
				}

				/**
     * Execute each of the listeners in order with the supplied arguments.
     * @param {string} event
     * @param {*} opt_args [arg1], [arg2], [...]
     * @return {boolean} Returns true if event had listeners, false otherwise.
     */

			}, {
				key: 'emit',
				value: function emit(event) {
					var listeners = this.getRawListeners_(event);
					if (listeners.length === 0) {
						return false;
					}

					var args = _metal.array.slice(arguments, 1); // eslint-disable-line
					this.runListeners_(listeners, args, this.buildFacade_(event));
					return true;
				}

				/**
     * Gets the listener objects for the given event, if there are any.
     * @param {string} event
     * @return {!Array}
     * @protected
     */

			}, {
				key: 'getRawListeners_',
				value: function getRawListeners_(event) {
					var directListeners = toArray(this.events_ && this.events_[event]);
					return directListeners.concat(toArray(this.events_ && this.events_['*']));
				}

				/**
     * Gets the configuration option which determines if an event facade should
     * be sent as a param of listeners when emitting events. If set to true, the
     * facade will be passed as the first argument of the listener.
     * @return {boolean}
     */

			}, {
				key: 'getShouldUseFacade',
				value: function getShouldUseFacade() {
					return this.shouldUseFacade_;
				}

				/**
     * Returns an array of listeners for the specified event.
     * @param {string} event
     * @return {Array} Array of listeners.
     */

			}, {
				key: 'listeners',
				value: function listeners(event) {
					return this.getRawListeners_(event).map(function (listener) {
						return listener.fn ? listener.fn : listener;
					});
				}

				/**
     * Adds a listener that will be invoked a fixed number of times for the
     * events. After each event is triggered the specified amount of times, the
     * listener is removed for it.
     * @param {!(Array|string)} event
     * @param {number} amount The amount of times this event should be listened
     * to.
     * @param {!Function} listener
     * @return {!EventHandle} Can be used to remove the listener.
     */

			}, {
				key: 'many',
				value: function many(event, amount, listener) {
					var events = this.toEventsArray_(event);
					for (var i = 0; i < events.length; i++) {
						this.many_(events[i], amount, listener);
					}

					return new _EventHandle2.default(this, event, listener);
				}

				/**
     * Adds a listener that will be invoked a fixed number of times for a single
     * event. After the event is triggered the specified amount of times, the
     * listener is removed.
     * @param {string} event
     * @param {number} amount The amount of times this event should be listened
     * to.
     * @param {!Function} listener
     * @protected
     */

			}, {
				key: 'many_',
				value: function many_(event, amount, listener) {
					var self = this;

					if (amount <= 0) {
						return;
					}

					/**
      *
      */
					function handlerInternal() {
						if (--amount === 0) {
							self.removeListener(event, handlerInternal);
						}
						listener.apply(self, arguments); // eslint-disable-line
					}

					self.addSingleListener_(event, handlerInternal, false, listener);
				}

				/**
     * Checks if a listener object matches the given listener function. To match,
     * it needs to either point to that listener or have it as its origin.
     * @param {!Object} listenerObj
     * @param {!Function} listener
     * @return {boolean}
     * @protected
     */

			}, {
				key: 'matchesListener_',
				value: function matchesListener_(listenerObj, listener) {
					var fn = listenerObj.fn || listenerObj;
					return fn === listener || listenerObj.origin && listenerObj.origin === listener // eslint-disable-line
					;
				}

				/**
     * Removes a listener for the specified events.
     * Caution: changes array indices in the listener array behind the listener.
     * @param {!(Array|string)} event
     * @param {!Function} listener
     * @return {!Object} Returns emitter, so calls can be chained.
     */

			}, {
				key: 'off',
				value: function off(event, listener) {
					this.validateListener_(listener);
					if (!this.events_) {
						return this;
					}

					var events = this.toEventsArray_(event);
					for (var i = 0; i < events.length; i++) {
						this.events_[events[i]] = this.removeMatchingListenerObjs_(toArray(this.events_[events[i]]), listener);
					}

					return this;
				}

				/**
     * Adds a listener to the end of the listeners array for the specified events.
     * @param {!(Array|string)} events
     * @param {!Function} listener
     * @return {!EventHandle} Can be used to remove the listener.
     */

			}, {
				key: 'on',
				value: function on() {
					return this.addListener.apply(this, arguments); // eslint-disable-line
				}

				/**
     * Adds handler that gets triggered when an event is listened to on this
     * instance.
     * @param {!function()} handler
     */

			}, {
				key: 'onListener',
				value: function onListener(handler) {
					this.listenerHandlers_ = this.addHandler_(this.listenerHandlers_, handler); // eslint-disable-line
				}

				/**
     * Adds a one time listener for the events. This listener is invoked only the
     * next time each event is fired, after which it is removed.
     * @param {!(Array|string)} events
     * @param {!Function} listener
     * @return {!EventHandle} Can be used to remove the listener.
     */

			}, {
				key: 'once',
				value: function once(events, listener) {
					return this.many(events, 1, listener);
				}

				/**
     * Removes all listeners, or those of the specified events. It's not a good
     * idea to remove listeners that were added elsewhere in the code,
     * especially when it's on an emitter that you didn't create.
     * @param {(Array|string)=} event
     * @return {!Object} Returns emitter, so calls can be chained.
     */

			}, {
				key: 'removeAllListeners',
				value: function removeAllListeners(event) {
					if (this.events_) {
						if (event) {
							var events = this.toEventsArray_(event);
							for (var i = 0; i < events.length; i++) {
								this.events_[events[i]] = null;
							}
						} else {
							this.events_ = null;
						}
					}
					return this;
				}

				/**
     * Removes all listener objects from the given array that match the given
     * listener function.
     * @param {Array.<Object>} listenerObjs
     * @param {!Function} listener
     * @return {Array.<Object>|Object} The new listeners array for this event.
     * @protected
     */

			}, {
				key: 'removeMatchingListenerObjs_',
				value: function removeMatchingListenerObjs_(listenerObjs, listener) {
					var finalListeners = [];
					for (var i = 0; i < listenerObjs.length; i++) {
						if (!this.matchesListener_(listenerObjs[i], listener)) {
							finalListeners.push(listenerObjs[i]);
						}
					}
					return finalListeners.length > 0 ? finalListeners : null;
				}

				/**
     * Removes a listener for the specified events.
     * Caution: changes array indices in the listener array behind the listener.
     * @param {!(Array|string)} events
     * @param {!Function} listener
     * @return {!Object} Returns emitter, so calls can be chained.
     */

			}, {
				key: 'removeListener',
				value: function removeListener() {
					return this.off.apply(this, arguments); // eslint-disable-line
				}

				/**
     * Runs the handlers when an event is listened to.
     * @param {string} event
     * @protected
     */

			}, {
				key: 'runListenerHandlers_',
				value: function runListenerHandlers_(event) {
					var handlers = this.listenerHandlers_;
					if (handlers) {
						handlers = toArray(handlers);
						for (var i = 0; i < handlers.length; i++) {
							handlers[i](event);
						}
					}
				}

				/**
     * Runs the given listeners.
     * @param {!Array} listeners
     * @param {!Array} args
     * @param {Object} facade
     * @protected
     */

			}, {
				key: 'runListeners_',
				value: function runListeners_(listeners, args, facade) {
					if (facade) {
						args.push(facade);
					}

					var defaultListeners = [];
					for (var i = 0; i < listeners.length; i++) {
						var listener = listeners[i].fn || listeners[i];
						if (listeners[i].default) {
							defaultListeners.push(listener);
						} else {
							listener.apply(this, args);
						}
					}
					if (!facade || !facade.preventedDefault) {
						for (var j = 0; j < defaultListeners.length; j++) {
							defaultListeners[j].apply(this, args);
						}
					}
				}

				/**
     * Sets the configuration option which determines if an event facade should
     * be sent as a param of listeners when emitting events. If set to true, the
     * facade will be passed as the first argument of the listener.
     * @param {boolean} shouldUseFacade
     * @return {!Object} Returns emitter, so calls can be chained.
     */

			}, {
				key: 'setShouldUseFacade',
				value: function setShouldUseFacade(shouldUseFacade) {
					this.shouldUseFacade_ = shouldUseFacade;
					return this;
				}

				/**
     * Converts the parameter to an array if only one event is given. Reuses the
     * same array each time this conversion is done, to avoid using more memory
     * than necessary.
     * @param  {!(Array|string)} events
     * @return {!Array}
     * @protected
     */

			}, {
				key: 'toEventsArray_',
				value: function toEventsArray_(events) {
					if ((0, _metal.isString)(events)) {
						singleArray_[0] = events;
						events = singleArray_;
					}
					return events;
				}

				/**
     * Checks if the given listener is valid, throwing an exception when it's not.
     * @param  {*} listener
     * @protected
     */

			}, {
				key: 'validateListener_',
				value: function validateListener_(listener) {
					if (!(0, _metal.isFunction)(listener)) {
						throw new TypeError('Listener must be a function');
					}
				}
			}]);

			return EventEmitter;
		}(_metal.Disposable);

		/**
   * Converts to an array
   * @param {Object} val
   * @return {Array}
   */

		function toArray(val) {
			val = val || [];
			return Array.isArray(val) ? val : [val];
		}

		exports.default = EventEmitter;
		//# sourceMappingURL=EventEmitter.js.map
	}
});
//# sourceMappingURL=EventEmitter.js.map
'use strict';

Liferay.Loader.define("frontend-js-metal-web$metal-events@2.16.8/lib/EventEmitterProxy", ['module', 'exports', 'require', 'frontend-js-metal-web$metal'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		var _metal = require("frontend-js-metal-web$metal");

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		/**
   * EventEmitterProxy utility. It's responsible for linking two EventEmitter
   * instances together, emitting events from the first emitter through the
   * second one. That means that listening to a supported event on the target
   * emitter will mean listening to it on the origin emitter as well.
   * @extends {Disposable}
   */
		var EventEmitterProxy = function (_Disposable) {
			_inherits(EventEmitterProxy, _Disposable);

			/**
    * @param {EventEmitter} originEmitter Events originated on this emitter
    * will be fired for the target emitter's listeners as well.
    * @param {EventEmitter} targetEmitter Event listeners attached to this emitter
    * will also be triggered when the event is fired by the origin emitter.
    * @param {Object} blacklist Optional blacklist of events that should not be
    * proxied.
    * @param {Object} whitelist
    */
			function EventEmitterProxy(originEmitter, targetEmitter, blacklist, whitelist) {
				_classCallCheck(this, EventEmitterProxy);

				/**
     * Map of events that should not be proxied.
     * @type {Object}
     * @protected
     */
				var _this = _possibleConstructorReturn(this, (EventEmitterProxy.__proto__ || Object.getPrototypeOf(EventEmitterProxy)).call(this));

				_this.blacklist_ = blacklist;

				/**
     * The origin emitter. This emitter's events will be proxied through the
     * target emitter.
     * @type {EventEmitter}
     * @protected
     */
				_this.originEmitter_ = originEmitter;

				/**
     * A list of events that are pending to be listened by an actual origin
     * emitter. Events are stored here when the origin doesn't exist, so they
     * can be set on a new origin when one is set.
     * @type {Array}
     * @protected
     */
				_this.pendingEvents_ = null;

				/**
     * Holds a map of events from the origin emitter that are already being proxied.
     * @type {Object<string, !EventHandle>}
     * @protected
     */
				_this.proxiedEvents_ = null;

				/**
     * The target emitter. This emitter will emit all events that come from
     * the origin emitter.
     * @type {EventEmitter}
     * @protected
     */
				_this.targetEmitter_ = targetEmitter;

				/**
     * Map of events that should be proxied. If whitelist is set blacklist is ignored.
     * @type {Object}
     * @protected
     */
				_this.whitelist_ = whitelist;

				_this.startProxy_();
				return _this;
			}

			/**
    * Adds the given listener for the given event.
    * @param {string} event
    * @param {!function()} listener
    * @return {!EventHandle} The listened event's handle.
    * @protected
    */

			_createClass(EventEmitterProxy, [{
				key: 'addListener_',
				value: function addListener_(event, listener) {
					return this.originEmitter_.on(event, listener);
				}

				/**
     * @inheritDoc
     */

			}, {
				key: 'disposeInternal',
				value: function disposeInternal() {
					this.removeListeners_();
					this.proxiedEvents_ = null;
					this.originEmitter_ = null;
					this.targetEmitter_ = null;
				}

				/**
     * Emits the specified event type on the target emitter.
     * @protected
     */

			}, {
				key: 'emitOnTarget_',
				value: function emitOnTarget_() {
					var _targetEmitter_;

					(_targetEmitter_ = this.targetEmitter_).emit.apply(_targetEmitter_, arguments);
				}

				/**
     * Proxies the given event from the origin to the target emitter.
     * @param {string} event
     */

			}, {
				key: 'proxyEvent',
				value: function proxyEvent(event) {
					if (this.shouldProxyEvent_(event)) {
						this.tryToAddListener_(event);
					}
				}

				/**
     * Removes the proxy listener for all events.
     * @protected
     */

			}, {
				key: 'removeListeners_',
				value: function removeListeners_() {
					if (this.proxiedEvents_) {
						var events = Object.keys(this.proxiedEvents_);
						for (var i = 0; i < events.length; i++) {
							this.proxiedEvents_[events[i]].removeListener();
						}
						this.proxiedEvents_ = null;
					}
					this.pendingEvents_ = null;
				}

				/**
     * Changes the origin emitter. This automatically detaches any events that
     * were already being proxied from the previous emitter, and starts proxying
     * them on the new emitter instead.
     * @param {!EventEmitter} originEmitter
     */

			}, {
				key: 'setOriginEmitter',
				value: function setOriginEmitter(originEmitter) {
					var _this2 = this;

					var events = this.originEmitter_ && this.proxiedEvents_ ? Object.keys(this.proxiedEvents_) : this.pendingEvents_;
					this.originEmitter_ = originEmitter;
					if (events) {
						this.removeListeners_();
						events.forEach(function (event) {
							return _this2.proxyEvent(event);
						});
					}
				}

				/**
     * Checks if the given event should be proxied.
     * @param {string} event
     * @return {boolean}
     * @protected
     */

			}, {
				key: 'shouldProxyEvent_',
				value: function shouldProxyEvent_(event) {
					if (this.whitelist_ && !this.whitelist_[event]) {
						return false;
					}
					if (this.blacklist_ && this.blacklist_[event]) {
						return false;
					}
					return !this.proxiedEvents_ || !this.proxiedEvents_[event];
				}

				/**
     * Starts proxying all events from the origin to the target emitter.
     * @protected
     */

			}, {
				key: 'startProxy_',
				value: function startProxy_() {
					this.targetEmitter_.onListener(this.proxyEvent.bind(this));
				}

				/**
     * Adds a listener to the origin emitter, if it exists. Otherwise, stores
     * the pending listener so it can be used on a future origin emitter.
     * @param {string} event
     * @protected
     */

			}, {
				key: 'tryToAddListener_',
				value: function tryToAddListener_(event) {
					if (this.originEmitter_) {
						this.proxiedEvents_ = this.proxiedEvents_ || {};
						this.proxiedEvents_[event] = this.addListener_(event, this.emitOnTarget_.bind(this, event));
					} else {
						this.pendingEvents_ = this.pendingEvents_ || [];
						this.pendingEvents_.push(event);
					}
				}
			}]);

			return EventEmitterProxy;
		}(_metal.Disposable);

		exports.default = EventEmitterProxy;
		//# sourceMappingURL=EventEmitterProxy.js.map
	}
});
//# sourceMappingURL=EventEmitterProxy.js.map
'use strict';

Liferay.Loader.define("frontend-js-metal-web$metal-events@2.16.8/lib/EventHandler", ['module', 'exports', 'require', 'frontend-js-metal-web$metal'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		var _metal = require("frontend-js-metal-web$metal");

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		/**
   * EventHandler utility. It's useful for easily removing a group of
   * listeners from different EventEmitter instances.
   * @extends {Disposable}
   */
		var EventHandler = function (_Disposable) {
			_inherits(EventHandler, _Disposable);

			/**
    * EventHandler constructor
    */
			function EventHandler() {
				_classCallCheck(this, EventHandler);

				/**
     * An array that holds the added event handles, so the listeners can be
     * removed later.
     * @type {Array.<EventHandle>}
     * @protected
     */
				var _this = _possibleConstructorReturn(this, (EventHandler.__proto__ || Object.getPrototypeOf(EventHandler)).call(this));

				_this.eventHandles_ = [];
				return _this;
			}

			/**
    * Adds event handles to be removed later through the `removeAllListeners`
    * method.
    * @param {...(!EventHandle)} var_args
    */

			_createClass(EventHandler, [{
				key: 'add',
				value: function add() {
					for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						args[_key] = arguments[_key];
					}

					for (var i = 0; i < arguments.length; i++) {
						this.eventHandles_.push(args[i]);
					}
				}

				/**
     * Disposes of this instance's object references.
     * @override
     */

			}, {
				key: 'disposeInternal',
				value: function disposeInternal() {
					this.eventHandles_ = null;
				}

				/**
     * Removes all listeners that have been added through the `add` method.
     */

			}, {
				key: 'removeAllListeners',
				value: function removeAllListeners() {
					for (var i = 0; i < this.eventHandles_.length; i++) {
						this.eventHandles_[i].removeListener();
					}

					this.eventHandles_ = [];
				}
			}]);

			return EventHandler;
		}(_metal.Disposable);

		exports.default = EventHandler;
		//# sourceMappingURL=EventHandler.js.map
	}
});
//# sourceMappingURL=EventHandler.js.map
'use strict';

Liferay.Loader.define('frontend-js-metal-web$metal-events@2.16.8/lib/events', ['module', 'exports', 'require', './EventEmitter', './EventEmitterProxy', './EventHandle', './EventHandler'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EventHandler = exports.EventHandle = exports.EventEmitterProxy = exports.EventEmitter = undefined;

    var _EventEmitter = require('./EventEmitter');

    var _EventEmitter2 = _interopRequireDefault(_EventEmitter);

    var _EventEmitterProxy = require('./EventEmitterProxy');

    var _EventEmitterProxy2 = _interopRequireDefault(_EventEmitterProxy);

    var _EventHandle = require('./EventHandle');

    var _EventHandle2 = _interopRequireDefault(_EventHandle);

    var _EventHandler = require('./EventHandler');

    var _EventHandler2 = _interopRequireDefault(_EventHandler);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    exports.default = _EventEmitter2.default;
    exports.EventEmitter = _EventEmitter2.default;
    exports.EventEmitterProxy = _EventEmitterProxy2.default;
    exports.EventHandle = _EventHandle2.default;
    exports.EventHandler = _EventHandler2.default;
    //# sourceMappingURL=events.js.map
  }
});
//# sourceMappingURL=events.js.map
'use strict';

Liferay.Loader.define("frontend-js-metal-web$metal-state@2.16.8/lib/State", ['module', 'exports', 'require', 'frontend-js-metal-web$metal', 'frontend-js-metal-web$metal-events'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		var _get = function get(object, property, receiver) {
			if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
				var parent = Object.getPrototypeOf(object);if (parent === null) {
					return undefined;
				} else {
					return get(parent, property, receiver);
				}
			} else if ("value" in desc) {
				return desc.value;
			} else {
				var getter = desc.get;if (getter === undefined) {
					return undefined;
				}return getter.call(receiver);
			}
		};

		var _metal = require("frontend-js-metal-web$metal");

		var _metalEvents = require("frontend-js-metal-web$metal-events");

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		/**
   * State adds support for having object properties that can be watched for
   * changes, as well as configured with validators, setters and other options.
   * See the `configState` method for a complete list of available configuration
   * options for each state key.
   * @extends {EventEmitter}
   */
		var State = function (_EventEmitter) {
			_inherits(State, _EventEmitter);

			/**
    * Constructor function for `State`.
    * @param {Object=} config Optional config object with initial values to
    *     set state properties to.
    * @param {Object=} obj Optional object that should hold the state
    *     properties. If none is given, they will be added directly to `this`
    *     instead.
    * @param {Object=} context Optional context to call functions (like
    *     validators and setters) on. Defaults to `this`.
    */
			function State(config, obj, context) {
				_classCallCheck(this, State);

				/**
     * Context to call functions (like validators and setters) on.
     * @type {!Object}
     * @protected
     */
				var _this = _possibleConstructorReturn(this, (State.__proto__ || Object.getPrototypeOf(State)).call(this));

				_this.context_ = context || _this;

				/**
     * Map of keys that can not be used as state keys.
     * @type {Object<string, boolean>}
     * @protected
     */
				_this.keysBlacklist_ = null;

				/**
     * Object that should hold the state properties.
     * @type {!Object}
     * @protected
     */
				_this.obj_ = obj || _this;

				_this.eventData_ = null;

				/**
     * Object with information about the batch event that is currently
     * scheduled, or null if none is.
     * @type {Object}
     * @protected
     */
				_this.scheduledBatchData_ = null;

				/**
     * Object that contains information about all this instance's state keys.
     * @type {!Object<string, !Object>}
     * @protected
     */
				_this.stateInfo_ = {};

				_this.stateConfigs_ = {};

				_this.initialValues_ = _metal.object.mixin({}, config);

				_this.setShouldUseFacade(true);
				_this.configStateFromStaticHint_();

				Object.defineProperty(_this.obj_, State.STATE_REF_KEY, {
					configurable: true,
					enumerable: false,
					value: _this
				});
				return _this;
			}

			/**
    * Logs an error if the given property is required but wasn't given.
    * @param {string} name
    * @protected
    */

			_createClass(State, [{
				key: 'assertGivenIfRequired_',
				value: function assertGivenIfRequired_(name) {
					var config = this.stateConfigs_[name];
					if (config.required) {
						var info = this.getStateInfo(name);
						var value = info.state === State.KeyStates.INITIALIZED ? this.get(name) : this.initialValues_[name];
						if (!(0, _metal.isDefAndNotNull)(value)) {
							var errorMessage = 'The property called "' + name + '" is required but didn\'t receive a value.';
							if (this.shouldThrowValidationError()) {
								throw new Error(errorMessage);
							} else {
								console.error(errorMessage);
							}
						}
					}
				}

				/**
     * Logs an error if the `validatorReturn` is instance of `Error`.
     * @param {*} validatorReturn
     * @protected
     */

			}, {
				key: 'assertValidatorReturnInstanceOfError_',
				value: function assertValidatorReturnInstanceOfError_(validatorReturn) {
					if (validatorReturn instanceof Error) {
						if (this.shouldThrowValidationError()) {
							throw validatorReturn;
						} else {
							console.error('Warning: ' + validatorReturn);
						}
					}
				}

				/**
     * Checks that the given name is a valid state key name. If it's not, an error
     * will be thrown.
     * @param {string} name The name to be validated.
     * @throws {Error}
     * @protected
     */

			}, {
				key: 'assertValidStateKeyName_',
				value: function assertValidStateKeyName_(name) {
					if (this.keysBlacklist_ && this.keysBlacklist_[name]) {
						throw new Error('It\'s not allowed to create a state key with the name "' + name + '".');
					}
				}

				/**
     * Builds the property definition object for the specified state key.
     * @param {string} name The name of the key.
     * @return {!Object}
     * @protected
     */

			}, {
				key: 'buildKeyPropertyDef_',
				value: function buildKeyPropertyDef_(name) {
					return {
						configurable: true,
						enumerable: true,
						get: function get() {
							return this[State.STATE_REF_KEY].getStateKeyValue_(name);
						},
						set: function set(val) {
							this[State.STATE_REF_KEY].setStateKeyValue_(name, val);
						}
					};
				}

				/**
     * Calls the requested function, running the appropriate code for when it's
     * passed as an actual function object or just the function's name.
     * @param {!Function|string} fn Function, or name of the function to run.
     * @param {!Array} args optional array of parameters to be passed to the
     *   function that will be called.
     * @return {*} The return value of the called function.
     * @protected
     */

			}, {
				key: 'callFunction_',
				value: function callFunction_(fn, args) {
					if ((0, _metal.isString)(fn)) {
						return this.context_[fn].apply(this.context_, args); // eslint-disable-line
					} else if ((0, _metal.isFunction)(fn)) {
						return fn.apply(this.context_, args);
					}
				}

				/**
     * Calls the state key's setter, if there is one.
     * @param {string} name The name of the key.
     * @param {*} value The value to be set.
     * @param {*} currentValue The current value.
     * @return {*} The final value to be set.
     * @protected
     */

			}, {
				key: 'callSetter_',
				value: function callSetter_(name, value, currentValue) {
					var config = this.stateConfigs_[name];
					if (config.setter) {
						value = this.callFunction_(config.setter, [value, currentValue]);
					}
					return value;
				}

				/**
     * Calls the state key's validator, if there is one. Emits console
     * warning if validator returns a string.
     * @param {string} name The name of the key.
     * @param {*} value The value to be validated.
     * @return {boolean} Flag indicating if value is valid or not.
     * @protected
     */

			}, {
				key: 'callValidator_',
				value: function callValidator_(name, value) {
					var config = this.stateConfigs_[name];
					if (config.validator) {
						var validatorReturn = this.callFunction_(config.validator, [value, name, this.context_]);
						this.assertValidatorReturnInstanceOfError_(validatorReturn);
						return validatorReturn;
					}
					return true;
				}

				/**
     * Checks if the it's allowed to write on the requested state key.
     * @param {string} name The name of the key.
     * @return {boolean}
     */

			}, {
				key: 'canSetState',
				value: function canSetState(name) {
					var info = this.getStateInfo(name);
					return !this.stateConfigs_[name].writeOnce || !info.written;
				}

				/**
     * Adds the given key(s) to the state, together with its(their) configs.
     * Config objects support the given settings:
     *     required - When set to `true`, causes errors to be printed (via
     *     `console.error`) if no value is given for the property.
     *
     *     setter - Function for normalizing state key values. It receives the new
     *     value that was set, and returns the value that should be stored.
     *
     *     validator - Function that validates state key values. When it returns
     *     false, the new value is ignored. When it returns an instance of Error,
     *     it will emit the error to the console.
     *
     *     value - The default value for the state key. Note that setting this to
     *     an object will cause all class instances to use the same reference to
     *     the object. To have each instance use a different reference for objects,
     *     use the `valueFn` option instead.
     *
     *     valueFn - A function that returns the default value for a state key.
     *
     *     writeOnce - Ignores writes to the state key after it's been first
     *     written to. That is, allows writes only when setting the value for the
     *     first time.
     * @param {!Object.<string, !Object>|string} configs An object that maps
     *     configuration options for keys to be added to the state.
     * @param {boolean|Object|*=} context The context where the added state
     *     keys will be defined (defaults to `this`), or false if they shouldn't
     *     be defined at all.
     */

			}, {
				key: 'configState',
				value: function configState(configs, context) {
					var names = Object.keys(configs);
					if (names.length === 0) {
						return;
					}

					if (context !== false) {
						var props = {};
						for (var i = 0; i < names.length; i++) {
							var name = names[i];
							this.assertValidStateKeyName_(name);
							props[name] = this.buildKeyPropertyDef_(name);
						}
						Object.defineProperties(context || this.obj_, props);
					}

					this.stateConfigs_ = configs;
					for (var _i = 0; _i < names.length; _i++) {
						var _name = names[_i];
						configs[_name] = configs[_name].config ? configs[_name].config : configs[_name];
						this.assertGivenIfRequired_(names[_i]);
						this.validateInitialValue_(names[_i]);
					}
				}

				/**
     * Adds state keys from super classes static hint `MyClass.STATE = {};`.
     * @protected
     */

			}, {
				key: 'configStateFromStaticHint_',
				value: function configStateFromStaticHint_() {
					var ctor = this.constructor;
					if (ctor !== State) {
						var defineContext = void 0;
						if (this.obj_ === this) {
							var staticKey = State.STATE_STATIC_HINT_CONFIGURED;

							ctor[staticKey] = ctor[staticKey] || {};

							defineContext = ctor[staticKey][ctor.name] ? false : ctor.prototype; // eslint-disable-line
							ctor[staticKey][ctor.name] = true;
						}
						this.configState(State.getStateStatic(ctor), defineContext);
					}
				}

				/**
     * @inheritDoc
     */

			}, {
				key: 'disposeInternal',
				value: function disposeInternal() {
					_get(State.prototype.__proto__ || Object.getPrototypeOf(State.prototype), 'disposeInternal', this).call(this);
					this.initialValues_ = null;
					this.stateInfo_ = null;
					this.stateConfigs_ = null;
					this.scheduledBatchData_ = null;
				}

				/**
     * Emits the state change batch event.
     * @protected
     */

			}, {
				key: 'emitBatchEvent_',
				value: function emitBatchEvent_() {
					if (!this.isDisposed()) {
						this.context_.emit('stateWillChange', this.scheduledBatchData_);

						var data = this.scheduledBatchData_;
						this.scheduledBatchData_ = null;
						this.context_.emit('stateChanged', data);
					}
				}

				/**
     * Returns the value of the requested state key.
     * Note: this can and should be accomplished by accessing the value as a
     * regular property. This should only be used in cases where a function is
     * actually needed.
     * @param {string} name
     * @return {*}
     */

			}, {
				key: 'get',
				value: function get(name) {
					return this.obj_[name];
				}

				/**
     * Returns an object that maps state keys to their values.
     * @param {Array<string>=} names A list of names of the keys that should
     *   be returned. If none is given, the whole state will be returned.
     * @return {Object.<string, *>}
     */

			}, {
				key: 'getState',
				value: function getState() {
					var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getStateKeys();

					var state = {};

					for (var i = 0; i < names.length; i++) {
						state[names[i]] = this.get(names[i]);
					}

					return state;
				}

				/**
     * Gets information about the specified state property.
     * @param {string} name
     * @return {!Object}
     */

			}, {
				key: 'getStateInfo',
				value: function getStateInfo(name) {
					if (!this.stateInfo_[name]) {
						this.stateInfo_[name] = {};
					}
					return this.stateInfo_[name];
				}

				/**
     * Gets the config object for the requested state key.
     * @param {string} name The key's name.
     * @return {Object}
     * @protected
     */

			}, {
				key: 'getStateKeyConfig',
				value: function getStateKeyConfig(name) {
					return this.stateConfigs_ ? this.stateConfigs_[name] : null;
				}

				/**
     * Returns an array with all state keys.
     * @return {!Array.<string>}
     */

			}, {
				key: 'getStateKeys',
				value: function getStateKeys() {
					return this.stateConfigs_ ? Object.keys(this.stateConfigs_) : [];
				}

				/**
     * Gets the value of the specified state key. This is passed as that key's
     * getter to the `Object.defineProperty` call inside the `addKeyToState` method.
     * @param {string} name The name of the key.
     * @return {*}
     * @protected
     */

			}, {
				key: 'getStateKeyValue_',
				value: function getStateKeyValue_(name) {
					if (!this.warnIfDisposed_(name)) {
						this.initStateKey_(name);
						return this.getStateInfo(name).value;
					}
				}

				/**
     * Merges the STATE static variable for the given constructor function.
     * @param  {!Function} ctor Constructor function.
     * @return {boolean} Returns true if merge happens, false otherwise.
     * @static
     */

			}, {
				key: 'hasBeenSet',

				/**
     * Checks if the value of the state key with the given name has already been
     * set. Note that this doesn't run the key's getter.
     * @param {string} name The name of the key.
     * @return {boolean}
     */
				value: function hasBeenSet(name) {
					var info = this.getStateInfo(name);
					return info.state === State.KeyStates.INITIALIZED || this.hasInitialValue_(name) // eslint-disable-line
					;
				}

				/**
     * Checks if an initial value was given to the specified state property.
     * @param {string} name The name of the key.
     * @return {boolean}
     * @protected
     */

			}, {
				key: 'hasInitialValue_',
				value: function hasInitialValue_(name) {
					return this.initialValues_.hasOwnProperty(name) && (0, _metal.isDef)(this.initialValues_[name]);
				}

				/**
     * Checks if the given key is present in this instance's state.
     * @param {string} key
     * @return {boolean}
     */

			}, {
				key: 'hasStateKey',
				value: function hasStateKey(key) {
					if (!this.warnIfDisposed_(key)) {
						return !!this.stateConfigs_[key];
					}
				}

				/**
     * Informs of changes to a state key's value through an event. Won't trigger
     * the event if the value hasn't changed or if it's being initialized.
     * @param {string} name The name of the key.
     * @param {*} prevVal The previous value of the key.
     * @protected
     */

			}, {
				key: 'informChange_',
				value: function informChange_(name, prevVal) {
					if (this.shouldInformChange_(name, prevVal)) {
						var data = _metal.object.mixin({
							key: name,
							newVal: this.get(name),
							prevVal: prevVal
						}, this.eventData_);
						this.context_.emit(name + 'Changed', data);
						this.context_.emit('stateKeyChanged', data);
						this.scheduleBatchEvent_(data);
					}
				}

				/**
     * Initializes the specified state key, giving it a first value.
     * @param {string} name The name of the key.
     * @protected
     */

			}, {
				key: 'initStateKey_',
				value: function initStateKey_(name) {
					var info = this.getStateInfo(name);
					if (info.state !== State.KeyStates.UNINITIALIZED) {
						return;
					}

					info.state = State.KeyStates.INITIALIZING;
					this.setInitialValue_(name);
					if (!info.written) {
						this.setDefaultValue(name);
					}
					info.state = State.KeyStates.INITIALIZED;
				}

				/**
     * Merges two values for the STATE property into a single object.
     * @param {Object} mergedVal
     * @param {Object} currVal
     * @return {!Object} The merged value.
     * @static
     */

			}, {
				key: 'removeStateKey',

				/**
     * Removes the requested state key.
     * @param {string} name The name of the key.
     */
				value: function removeStateKey(name) {
					this.stateInfo_[name] = null;
					this.stateConfigs_[name] = null;
					delete this.obj_[name];
				}

				/**
     * Schedules a state change batch event to be emitted asynchronously.
     * @param {!Object} changeData Information about a state key's update.
     * @protected
     */

			}, {
				key: 'scheduleBatchEvent_',
				value: function scheduleBatchEvent_(changeData) {
					if (!this.scheduledBatchData_) {
						_metal.async.nextTick(this.emitBatchEvent_, this);
						this.scheduledBatchData_ = _metal.object.mixin({
							changes: {}
						}, this.eventData_);
					}

					var name = changeData.key;
					var changes = this.scheduledBatchData_.changes;
					if (changes[name]) {
						changes[name].newVal = changeData.newVal;
					} else {
						changes[name] = changeData;
					}
				}

				/**
     * Sets the value of the requested state key.
     * Note: this can and should be accomplished by setting the state key as a
     * regular property. This should only be used in cases where a function is
     * actually needed.
     * @param {string} name
     * @param {*} value
     */

			}, {
				key: 'set',
				value: function set(name, value) {
					if (this.hasStateKey(name)) {
						this.obj_[name] = value;
					}
				}

				/**
     * Sets the default value of the requested state key.
     * @param {string} name The name of the key.
     */

			}, {
				key: 'setDefaultValue',
				value: function setDefaultValue(name) {
					var config = this.stateConfigs_[name];

					if (config.value !== undefined) {
						this.set(name, config.value);
					} else {
						this.set(name, this.callFunction_(config.valueFn));
					}
				}

				/**
     * Sets data to be sent with all events emitted from this instance.
     * @param {Object} data
     */

			}, {
				key: 'setEventData',
				value: function setEventData(data) {
					this.eventData_ = data;
				}

				/**
     * Sets the initial value of the requested state key.
     * @param {string} name The name of the key.
     * @protected
     */

			}, {
				key: 'setInitialValue_',
				value: function setInitialValue_(name) {
					if (this.hasInitialValue_(name)) {
						this.set(name, this.initialValues_[name]);
						this.initialValues_[name] = undefined;
					}
				}

				/**
     * Sets a map of keys that are not valid state keys.
     * @param {!Object<string, boolean>} blacklist
     */

			}, {
				key: 'setKeysBlacklist',
				value: function setKeysBlacklist(blacklist) {
					this.keysBlacklist_ = blacklist;
				}

				/**
     * Sets the value of all the specified state keys.
     * @param {!Object.<string,*>} values A map of state keys to the values they
     *   should be set to.
     * @param {function()=} callback An optional function that will be run
     *   after the next batched update is triggered.
     */

			}, {
				key: 'setState',
				value: function setState(values, callback) {
					var _this2 = this;

					Object.keys(values).forEach(function (name) {
						return _this2.set(name, values[name]);
					});
					if (callback && this.scheduledBatchData_) {
						this.context_.once('stateChanged', callback);
					}
				}

				/**
     * Sets the value of the specified state key. This is passed as that key's
     * setter to the `Object.defineProperty` call inside the `addKeyToState`
     * method.
     * @param {string} name The name of the key.
     * @param {*} value The new value of the key.
     * @protected
     */

			}, {
				key: 'setStateKeyValue_',
				value: function setStateKeyValue_(name, value) {
					if (this.warnIfDisposed_(name) || !this.canSetState(name) || !this.validateKeyValue_(name, value)) {
						return;
					}

					var prevVal = this.get(name);
					var info = this.getStateInfo(name);
					info.value = this.callSetter_(name, value, prevVal);
					this.assertGivenIfRequired_(name);
					info.written = true;
					this.informChange_(name, prevVal);
				}

				/**
     * Checks if we should inform about a state update. Updates are ignored during
     * state initialization. Otherwise, updates to primitive values are only
     * informed when the new value is different from the previous one. Updates to
     * objects (which includes functions and arrays) are always informed outside
     * initialization though, since we can't be sure if all of the internal data
     * has stayed the same.
     * @param {string} name The name of the key.
     * @param {*} prevVal The previous value of the key.
     * @return {boolean}
     * @protected
     */

			}, {
				key: 'shouldInformChange_',
				value: function shouldInformChange_(name, prevVal) {
					var info = this.getStateInfo(name);
					return info.state === State.KeyStates.INITIALIZED && ((0, _metal.isObject)(prevVal) || prevVal !== this.get(name));
				}

				/**
     * Returns a boolean that determines whether or not should throw error when
     * vaildator functions returns an `Error` instance.
     * @return {boolean} By default returns false.
     */

			}, {
				key: 'shouldThrowValidationError',
				value: function shouldThrowValidationError() {
					return false;
				}

				/**
     * Validates the initial value for the state property with the given name.
     * @param {string} name
     * @protected
     */

			}, {
				key: 'validateInitialValue_',
				value: function validateInitialValue_(name) {
					if (this.initialValues_.hasOwnProperty(name) && !this.callValidator_(name, this.initialValues_[name])) {
						delete this.initialValues_[name];
					}
				}

				/**
     * Validates the state key's value, which includes calling the validator
     * defined in the key's configuration object, if there is one.
     * @param {string} name The name of the key.
     * @param {*} value The value to be validated.
     * @return {boolean} Flag indicating if value is valid or not.
     * @protected
     */

			}, {
				key: 'validateKeyValue_',
				value: function validateKeyValue_(name, value) {
					var info = this.getStateInfo(name);
					return info.state === State.KeyStates.INITIALIZING || this.callValidator_(name, value);
				}

				/**
     * Warns if this instance has already been disposed.
     * @param {string} name Name of the property to be accessed if not disposed.
     * @return {boolean} True if disposed, or false otherwise.
     * @protected
     */

			}, {
				key: 'warnIfDisposed_',
				value: function warnIfDisposed_(name) {
					var disposed = this.isDisposed();
					if (disposed) {
						console.warn('Error. Trying to access property "' + name + '" on disposed instance');
					}
					return disposed;
				}
			}], [{
				key: 'getStateStatic',
				value: function getStateStatic(ctor) {
					return (0, _metal.getStaticProperty)(ctor, 'STATE', State.mergeState);
				}
			}, {
				key: 'mergeState',
				value: function mergeState(mergedVal, currVal) {
					return _metal.object.mixin({}, currVal, mergedVal);
				}
			}]);

			return State;
		}(_metalEvents.EventEmitter);

		/**
   * Constant used as key on State instance for storing property definition.
   * @type {!string}
   */

		State.STATE_REF_KEY = '__METAL_STATE_REF_KEY__';

		/**
   * Constant used as key on class constructors that extend from State, stores
   * which constructors have had their static STATE configured so that
   * configuration of STATE is not repeated.
   * @type {!string}
   */
		State.STATE_STATIC_HINT_CONFIGURED = '__METAL_STATE_STATIC_HINT_CONFIGURED__';

		/**
   * Constants that represent the states that a state key can be in.
   * @type {!Object}
   */
		State.KeyStates = {
			UNINITIALIZED: undefined,
			INITIALIZING: 1,
			INITIALIZED: 2
		};

		exports.default = State;
		//# sourceMappingURL=State.js.map
	}
});
//# sourceMappingURL=State.js.map
'use strict';

Liferay.Loader.define('frontend-js-metal-web$metal-state@2.16.8/lib/all/state', ['module', 'exports', 'require', '../validators', '../Config', '../State'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.State = exports.Config = exports.validators = undefined;

    var _validators = require('../validators');

    var _validators2 = _interopRequireDefault(_validators);

    var _Config = require('../Config');

    var _Config2 = _interopRequireDefault(_Config);

    var _State = require('../State');

    var _State2 = _interopRequireDefault(_State);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    exports.default = _State2.default;
    exports.validators = _validators2.default;
    exports.Config = _Config2.default;
    exports.State = _State2.default;
    //# sourceMappingURL=state.js.map
  }
});
//# sourceMappingURL=state.js.map
Liferay.Loader.define("frontend-js-web@4.0.38/liferay/CompatibilityEventProxy.es", ['module', 'exports', 'require', 'frontend-js-metal-web$metal', 'frontend-js-metal-web$metal-state'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;

    var _metal = require("frontend-js-metal-web$metal");

    var _metalState = _interopRequireDefault(require("frontend-js-metal-web$metal-state"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }return _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;
    }

    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }return _assertThisInitialized(self);
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return self;
    }

    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };return _getPrototypeOf(o);
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);
    }

    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;return o;
      };return _setPrototypeOf(o, p);
    }

    /**
     * Adds compatibility for YUI events, re-emitting events according to YUI naming
     * and adding the capability of adding targets to bubble events to them.
     */
    var CompatibilityEventProxy = /*#__PURE__*/function (_State) {
      _inherits(CompatibilityEventProxy, _State);

      /**
       * @inheritDoc
       */
      function CompatibilityEventProxy(config, element) {
        var _this;

        _classCallCheck(this, CompatibilityEventProxy);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(CompatibilityEventProxy).call(this, config, element));
        _this.eventTargets_ = [];
        _this.host = config.host;
        _this.namespace = config.namespace;

        _this.startCompatibility_();

        return _this;
      }
      /**
       * Registers another event target as a bubble target.
       *
       * @param  {!Object} target The YUI component that receives the emitted
       *         events.
       * @private
       */

      _createClass(CompatibilityEventProxy, [{
        key: "addTarget",
        value: function addTarget(target) {
          this.eventTargets_.push(target);
        }
        /**
         * Checks if the event is an attribute modification event and adapts the
         * event name accordingly.
         *
         * @param  {!String} eventName The event name.
         * @private
         * @return {String} The adapted event name.
         */

      }, {
        key: "checkAttributeEvent_",
        value: function checkAttributeEvent_(eventName) {
          return eventName.replace(this.adaptedEvents.match, this.adaptedEvents.replace);
        }
        /**
         * Emits the event adapted to YUI.
         *
         * @param  {!String} eventName The event name.
         * @param  {!Event} event The event.
         * @private
         */

      }, {
        key: "emitCompatibleEvents_",
        value: function emitCompatibleEvents_(eventName, event) {
          var _this2 = this;

          this.eventTargets_.forEach(function (target) {
            if (target.fire) {
              var prefixedEventName = _this2.namespace ? _this2.namespace + ':' + eventName : eventName;
              var yuiEvent = target._yuievt.events[prefixedEventName];

              if (_metal.core.isObject(event)) {
                try {
                  event.target = _this2.host;
                } catch (e) {// Do nothing
                }
              }

              var emitFacadeReference;

              if (!_this2.emitFacade && yuiEvent) {
                emitFacadeReference = yuiEvent.emitFacade;
                yuiEvent.emitFacade = false;
              }

              target.fire(prefixedEventName, event);

              if (!_this2.emitFacade && yuiEvent) {
                yuiEvent.emitFacade = emitFacadeReference;
              }
            }
          });
        }
        /**
         * Emits YUI-based events to maintain backwards compatibility.
         *
         * @private
         */

      }, {
        key: "startCompatibility_",
        value: function startCompatibility_() {
          var _this3 = this;

          this.host.on('*', function (event, eventFacade) {
            if (!eventFacade) {
              eventFacade = event;
            }

            var compatibleEvent = _this3.checkAttributeEvent_(eventFacade.type);

            if (compatibleEvent !== eventFacade.type) {
              eventFacade.type = compatibleEvent;

              _this3.host.emit(compatibleEvent, event, eventFacade);
            } else if (_this3.eventTargets_.length > 0) {
              _this3.emitCompatibleEvents_(compatibleEvent, event);
            }
          });
        }
      }]);

      return CompatibilityEventProxy;
    }(_metalState.default);
    /**
     * State definition.
     *
     * @ignore
     * @static
     * @type {!Object}
     */

    CompatibilityEventProxy.STATE = {
      /**
       * Replaces event names with adapted YUI names.
       *
       * @instance
       * @memberof CompatibilityEventProxy
       * @type {Object}
       */
      adaptedEvents: {
        value: {
          match: /(.*)(Changed)$/,
          replace: '$1Change'
        }
      },

      /**
       * Whether the event facade should be emitted to the target.
       *
       * @default false
       * @instance
       * @memberof CompatibilityEventProxy
       * @type {String}
       */
      emitFacade: {
        value: false
      }
    };
    var _default = CompatibilityEventProxy;
    exports.default = _default;
    //# sourceMappingURL=CompatibilityEventProxy.es.js.map
  }
});
//# sourceMappingURL=CompatibilityEventProxy.es.js.map
'use strict';

Liferay.Loader.define('frontend-js-metal-web$metal-component@2.16.8/lib/events/events', ['module', 'exports', 'require', 'frontend-js-metal-web$metal'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		Object.defineProperty(exports, "__esModule", {
			value: true
		});
		exports.addListenersFromObj = addListenersFromObj;
		exports.getComponentFn = getComponentFn;

		var _metal = require('frontend-js-metal-web$metal');

		/**
   * Adds the listeners specified in the given object.
   * @param {!Component} component
   * @param {Object} events
   * @return {!Array<!EventHandle>} Handles from all subscribed events.
   */
		function addListenersFromObj(component, events) {
			var eventNames = Object.keys(events || {});
			var handles = [];
			for (var i = 0; i < eventNames.length; i++) {
				var info = extractListenerInfo_(component, events[eventNames[i]]);
				if (info.fn) {
					var handle = void 0;
					if (info.selector) {
						handle = component.delegate(eventNames[i], info.selector, info.fn); // eslint-disable-line
					} else {
						handle = component.on(eventNames[i], info.fn);
					}
					handles.push(handle);
				}
			}
			return handles;
		}

		/**
   * Extracts listener info from the given value.
   * @param {!Component} component
   * @param {function()|string|{selector:string,fn:function()}|string} value
   * @return {!{selector:string,fn:function()}}
   * @protected
   */
		function extractListenerInfo_(component, value) {
			var info = {
				fn: value
			};
			if ((0, _metal.isObject)(value) && !(0, _metal.isFunction)(value)) {
				info.selector = value.selector;
				info.fn = value.fn;
			}
			if ((0, _metal.isString)(info.fn)) {
				info.fn = getComponentFn(component, info.fn);
			}
			return info;
		}

		/**
   * Gets the listener function from its name. Throws an error if none exist.
   * @param {!Component} component
   * @param {string} fnName
   * @return {function()}
   */
		function getComponentFn(component, fnName) {
			if ((0, _metal.isFunction)(component[fnName])) {
				return component[fnName].bind(component);
			} else {
				console.error('No function named ' + fnName + ' was found in the component\n\t\t\t"' + (0, _metal.getFunctionName)(component.constructor) + '". Make sure that you specify\n\t\t\tvalid function names when adding inline listeners');
			}
		}
		//# sourceMappingURL=events.js.map
	}
});
//# sourceMappingURL=events.js.map
